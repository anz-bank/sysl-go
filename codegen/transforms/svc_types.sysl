CodeGenTransform:
  !view GoName(word <: string) -> string:
    word -> (:
      let splitted = if MatchString("^[\\p{L}_][\\p{L}\\p{N}_]*$", word) then [word] else FindAllString("[\\p{L}_][\\p{L}\\p{N}_]*", word, -1)

      # Common initialisms https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
      let initialisms = ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]

      let wordUpper = splitted -> <sequence of string> (w:
        let upper = ToTitle(TrimPrefix(w,"_"))
        out = if upper in initialisms then upper else Title(w)
      )
      out = Join(wordUpper flatten(.out), "")
    )

  !view GoType(t <: sysl.Type) -> string:
    t -> (:
      let isPtr = if t.type != "set" && t.type != "sequence" && t.optional == true then "*" else ""
      let sensitive = if t.type != "set" && t.type != "sequence" && "attrs" in t then if "sensitive" in t.attrs then "common.SensitiveString" else "" else ""
      let typeName = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "double"
          "INT" => "int64"
          "FLOAT" => "float64"
          "STRING" => "string"
          "STRING_8" => "string"
          "BOOL" => "bool"
          "BYTES" => "[]byte"
          "DATE" => "date.Date"
          "DATETIME" => if "time_format" in t.attrs then if "stdtime" == t.attrs.time_format then "time.Time" else "convert.JSONTime" else "convert.JSONTime"
        "sequence" => "[]" + GoType(t.sequence).out
        "set" => GoType(t.set).out + "Set"
        else GoName(t.type_ref).out
      out = if sensitive == "" then isPtr + typeName else isPtr + sensitive
    )

  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "types.go"
    )

  !view GoStructFields(fields <: set of Type) -> sequence of FieldDecl:
    fields -> (field:
      let fieldName = GoName(field.key).out
      identifier = fieldName
      let patternsAttr = if "patterns" in field.value.attrs then if "no_json" in field.value.attrs.patterns && "pk" in field.value.attrs.patterns then "-" else "" else ""
      let jsonTag = if patternsAttr != "" then patternsAttr else if "json_tag" in field.value.attrs then field.value.attrs.json_tag else field.key
      let fieldTag = '`json:"' + jsonTag
      Tag = if field.value.optional == true then (fieldTag + ',omitempty"`') else (fieldTag + '"`')
      Type = GoType(field.value).out
    )

  !view GoStructs(types <: set of Type) -> sequence of TopLevelDecl:
    types -> (type:
        let typeName = GoName(type.key).out
        let description = if "description" in type.attrs then " " + type.attrs.description else " ..."
        Comment = '// ' + typeName + description
        Declaration = type -> <Declaration>(:
          StructType = type -> <StructType>(:
            StructName = typeName
            FieldDecl = GoStructFields(.value.fields)
          )
        )
    )

  !view GoSetType(types <: set of Type) -> sequence of TopLevelDecl:
    types where("json_map_key" in .attrs) -> (type:
        let typeName = type.key + "Set"
        Comment = "// Generate wrapper set type"
        Declaration = type -> <Declaration>(:
          StructType = type -> <StructType>(:
            StructName = typeName
            FieldDecl = GoCreateMapDeclSetType(type.key)
          )
        )
    )

  !view GoCreateMapDeclSetType(typeName <: string) -> FieldDecl:
    typeName -> (:
      identifier = "M"
      Type = "map[string]" + typeName
    )

  !view GoAlias(aliases <: sequence of sysl.Types) -> sequence of TopLevelDecl:
    aliases -> (alias:
      let typeName = GoName(alias.key).out
      Comment = '// ' + typeName + ' ...'
      Declaration = alias -> <Declaration>(:
        AliasDecl = alias -> <AliasDecl>(:
          identifier = typeName
          Type = GoType(.value).out
        )
      )
    )

  !view GoEmptyType(aliases <: sequence of sysl.Types) -> sequence of TopLevelDecl:
    aliases -> (alias:
      let typeName = "Empty"
      Comment = '// ' + typeName + ' ...'
      Declaration = alias -> <Declaration>(:
        StructType = alias -> <StructType>(:
          StructName = typeName
        )
      )
    )

  !view varDecl(name <: string, typeName <: string) -> TopLevelDecl:
    name -> (:
      Comment = "// Reference imports to suppress unused errors"
      Declaration = name -> <Declaration> (:
        VarDeclWithVal = name -> <VarDeclWithVal> (:
          identifier = name
          Expression = name -> <Expression>(:
            ValueExpr = typeName
          )
        )
      )
    )

  !view validatorDecl(types <: set of Type) -> sequence of TopLevelDecl:
    types -> (type:
      let typeName = "*" + GoName(type.key).out
      Comment = '// ' + typeName + ' validator'
      MethodDecl = type -> <MethodDecl>(:
        Receiver = typeName -> <Receiver> (:
          ReceiverType = "s " + typeName
        )
        FunctionName = "Validate"
        Signature = type -> <Signature>(:
          Parameters = true
          Result = type -> <Result>(:
            TypeName = "error"
          )
        )
        Block = type -> <Block>(:
          StatementList = [type] -> <sequence of StatementList>(type:
            Statement = type -> <Statement>(:
              ReturnStmt = type -> <ReturnStmt>(:
                Expression = type -> <Expression>(:
                  FunctionCall = type -> <FunctionCall>(:
                    FunctionName = "validator.Validate"
                    FunctionArgs = type -> <FunctionArgs>(:
                      Expression = type -> <Expression>(:
                        ValueExpr = "s"
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

  !view addDecl(types <: set of Type) -> sequence of TopLevelDecl:
    types where("json_map_key" in .attrs) -> (type:
      let typeName = "*" + type.key
      Comment = '// ' + typeName + ' add'
      MethodDecl = type -> <MethodDecl>(:
        Receiver = typeName -> <Receiver> (:
          ReceiverType = "s " + typeName + "Set"
        )
        FunctionName = "Add"
        Signature = type -> <Signature>(:
          Parameters = type -> <Parameters>(:
            ParameterList = type -> <ParameterList>(:
              ParameterDecl = type -> <ParameterDecl>(:
                Identifier = ToLower(type.key)
                TypeName = type.key
              )
            )
          )
        )
        Block = type -> <Block>(:
          StatementList = [type] -> <sequence of StatementList>(type:
            Statement = type -> <Statement>(:
              AssignStmt = type -> <AssignStmt> (:
                Variables = "s.M[" + ToLower(type.key) + "." + type.attrs.json_map_key + "]"
                Expression = makeValueExpr(ToLower(type.key))
              )
            )
          )
        )
      )
    )

  !view lookupDecl(types <: set of Type) -> sequence of TopLevelDecl:
    types where("json_map_key" in .attrs) -> (type:
      let typeName = "*" + type.key
      Comment = '// ' + typeName + ' lookup'
      MethodDecl = type -> <MethodDecl>(:
        Receiver = typeName -> <Receiver> (:
          ReceiverType = "s " + typeName + "Set"
        )
        FunctionName = "Lookup"
        Signature = type -> <Signature>(:
          Parameters = type -> <Parameters>(:
            ParameterList = type -> <ParameterList>(:
              ParameterDecl = type -> <ParameterDecl>(:
                Identifier = type.attrs.json_map_key
                TypeName = "string"
              )
            )
          )
          Result = type -> <Result>(:
            TypeName = type.key
          )
        )
        Block = type -> <Block>(:
          StatementList = [type] -> <sequence of StatementList>(type:
            Statement = type -> <Statement>(:
              ReturnStmt = type -> <ReturnStmt>(:
                Expression = makeGetArgExpr("s", "M[" + type.attrs.json_map_key + "]")
              )
            )
          )
        )
      )
    )

  !view makeGetArgExpr(lhs <: string, rhs <: string) -> Expression:
    lhs -> (:
      GetArg = lhs -> <GetArg>(:
        LHS = lhs
        RHS = rhs
      )
    )

  !view makeValueExpr(strValue <: string) -> Expression:
    strValue -> (:
      ValueExpr = strValue
    )

  !view methodName(method <: string, urlPath <: string) -> string:
    method -> (:
      let withArg = if MatchString("\\{\\p{L}+\\}$", urlPath) && Contains("POST", ToUpper(method)) then "WithArg" else ""
      let getList = if MatchString("[\\p{L}\\p{N}]$", urlPath) && Contains("GET", ToUpper(method)) then "List" else ""

      let path = Split(urlPath, "/")

      let methodPostfix = path -> <sequence of string> (p:
        let postfix = if MatchString("^\\{", p) then "" else p
        out = Title(ToLower(postfix))
      )

      out = GoName(Title(ToLower(method)) + Join(methodPostfix flatten(.out), "")).out + withArg + getList
    )

  !view getPackagePrefix(payload <: string, module <: sysl.Module) -> string:
    payload -> (:
      let packages = Split(payload, ".") -> <set of string>(p:
        let depList = module.apps where(.value.name == p) -> <set of string> (dep:
          pkg = getPackage(dep.value).pname
          appName = p
        )
        pkg = depList flatten(.pkg)
        appName = depList flatten(.appName)
      )
      out = if packages flatten(.pkg) count != 1 then "" else packages flatten(.pkg) single + "."
      appName = if packages flatten(.appName) count != 1 then "" else packages flatten(.appName) single + "."
    )

  !view makeType(param <: sysl.Param, app <: string, pkg <: string) -> string:
    param -> (:
      out = if MatchString("\\.", param.type) then pkg + GoName(TrimPrefix(param.type_ref,app)).out else GoType(param).out
    )

  !view RequestTypes(eps <: sequence of sysl.Endpoint, module <: sysl.Module) -> sequence of TopLevelDecl:
    eps -> (ep:
      let Patterns = if ep.attrs count > 0 && "patterns" in ep.attrs then ep.attrs.patterns else [""]
      let urlPath = if "vars_in_url_name" in Patterns then Replace(Replace(ep.value.path, "{", "", -1),"{","",-1) else ep.value.path
      let typeName = methodName(ep.value.method, urlPath).out + "Request"
      Comment = '// ' + typeName + ' ...'
      Declaration = ep -> <Declaration>(:
        StructType = ep -> <StructType>(:
          StructName =  typeName
          let bodyParams = ep.value.params where ("body" in .attrs.patterns ) -> <sequence of FieldDecl>(p:
            identifier = "Request"
            let pkg = getPackagePrefix(p.type, module)
            Type = makeType(p, pkg.appName, pkg.out).out
          )
          let otherParams = ep.value.pathvars | ep.value.queryvars -> <sequence of FieldDecl>(p:
            identifier = GoName(p.name).out
            Type = GoType(p).out
          )

          FieldDecl = bodyParams | otherParams
        )
      )
    )

  !view goFile(app <: sysl.App, module <: sysl.Module) -> goFile:
    app -> (:

      PackageClause = app -> <package> (:
        let pname = getPackage(app).pname
        PackageName = ToLower(pname)
      )

      ImportDecl = app -> <ImportDecl>(:
        let validateLib = "github.com/anz-bank/sysl-go/validator"
        let common = "github.com/anz-bank/sysl-go/common"
        let convert = "github.com/anz-bank/sysl-go/convert"
        let spec = ["time", "", "github.com/rickb777/date", common, validateLib, convert] -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec
      )

      let unused = [varDecl("_", "time.Parse"), varDecl("_", "date.Parse")]

      Comment = "// Code generated by sysl DO NOT EDIT.\n"
      TopLevelDecl = unused | GoStructs(app.types where("patterns" !in .attrs)) | GoSetType(app.types where("patterns" !in .attrs)) | RequestTypes(app.endpoints, module) | validatorDecl(app.types where("patterns" !in .attrs)) |  addDecl(app.types where("patterns" !in .attrs)) | lookupDecl(app.types where("patterns" !in .attrs)) | GoAlias(app.alias where(HasPrefix(.key, "EXTERNAL_") == false && .key != "Empty")) | GoEmptyType(app.alias where(.key == "Empty"))
    )

  !view getPackage(app <: sysl.App) -> string:
    app -> (:
      pname = if "go_package" in .attrs then .attrs.go_package else if "package" in .attrs then if .attrs.package != null then .attrs.package else ToLower(.name) else ToLower(.name)
    )
