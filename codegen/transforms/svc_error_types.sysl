CodeGenTransform:
  !view GoName(word <: string) -> string:
    word -> (:
      let splitted = if MatchString("^[\\p{L}_][\\p{L}\\p{N}_]*$", word) then [word] else FindAllString("[\\p{L}_][\\p{L}\\p{N}_]*", word, -1)

      # Common initialisms https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
      let initialisms = ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]

      let wordUpper = splitted -> <sequence of string> (w:
        let upper = ToTitle(TrimPrefix(w,"_"))
        out = if upper in initialisms then upper else Title(w)
      )
      out = Join(wordUpper flatten(.out), "")
    )

  !view GoType(t <: sysl.Type) -> string:
    t -> (:
      let IsPtr = if t.optional == true && t.type != "sequence" then "*" else ""
      let typeName = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "double"
          "INT" => "int64"
          "FLOAT" => "float64"
          "STRING" => "string"
          "STRING_8" => "string"
          "BOOL" => "bool"
          "DATE" => "date.Date"
          "DATETIME" => "time.Time"
        "sequence" => "[]" + GoType(t.sequence).out
        else GoName(t.type_ref).out
      out = IsPtr + typeName
    )

  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "error_types.go"
    )

  !view ErrorMethodDecl(app <: sysl.App) -> out:
    app -> (:
      out = app.endpoints where ("error" in .ret) -> <set of TopLevelDecl> (ep:
        let errorTypeName = GoName(ep.ret.error).out
        Comment = "// Error fulfills the error type interface for " + errorTypeName
        MethodDecl = ep -> <MethodDecl> (:
          Receiver = ep -> <Receiver> (:
            ReceiverType = "s " + errorTypeName
          )
          FunctionName = "Error"
          Signature = ep -> <Signature>(:
            Parameters = true
            Result = ep -> <Result>(:
              TypeName = "string"
            )
          )
          Block = ep -> <Block>(:
            let typeDecl = ep -> <StatementList> (:
              Statement = ep -> <Statement> (:
                AliasDecl = ep -> <AliasDecl> (:
                  identifier = "plain"
                  Type = errorTypeName
                )
              )
            )
            let print = ep -> <StatementList> (:
              Statement = ep -> <Statement> (:
                ReturnStmt = ep -> <ReturnStmt> (:
                  PayLoad = 'fmt.Sprintf("%+v", plain(s))'
                )
              )
            )
            StatementList = [typeDecl, print]
          )
        )
      )
    )

  !view goFile(app <: sysl.App, module <: sysl.Module) -> goFile:
    app -> (:

      PackageClause = app -> <package> (:
        let pname = getPackage(app).pname
        PackageName = ToLower(pname)
      )

      ImportDecl = app -> <ImportDecl>(:
        let spec = ["fmt"] -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec
      )

      Comment = "// Code generated by sysl DO NOT EDIT.\n"

      let distinctDecl = ErrorMethodDecl(app).out -> <set of out>(d:
        out = d
      )

      TopLevelDecl = distinctDecl flatten(.out)
    )

  !view getPackage(app <: sysl.App) -> string:
    app -> (:
      pname = if "go_package" in .attrs then .attrs.go_package else if "package" in .attrs then if .attrs.package != null then .attrs.package else ToLower(.name) else ToLower(.name)
    )
