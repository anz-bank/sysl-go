CodeGenTransform:
  !view GoName(word <: string) -> string:
    word -> (:
      let splitted = if MatchString("^[\\p{L}_][\\p{L}\\p{N}_]*$", word) then [word] else FindAllString("[\\p{L}_][\\p{L}\\p{N}_]*", word, -1)

      # Common initialisms https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
      let initialisms = ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]

      let wordUpper = splitted -> <sequence of string> (w:
        let upper = ToTitle(TrimPrefix(w,"_"))
        out = if upper in initialisms then upper else Title(w)
      )
      out = Join(wordUpper flatten(.out), "")
    )

  !view ParamType(t <: sysl.Type) -> string:
    t -> (:
      let IsPtr = if t.optional == true && t.type != "sequence" then "*" else ""
      let typeName = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "double"
          "INT" => "int64"
          "FLOAT" => "float64"
          "STRING" => "string"
          "STRING_8" => "string"
          "BOOL" => "bool"
          "BYTES" => "[]byte"
          "DATE" => "date.Date"
          "DATETIME" => "time.Time"
        "sequence" => "[]" + GoType(t.sequence).out
        else GoName(t.type_ref).out
      out = IsPtr + typeName
    )

  !view paramDecl(identifier <: string, typeName <: string) -> ParameterDeclC:
    identifier -> (:
      ParameterDecl = identifier -> <ParameterDecl>(:
        Identifier = identifier
        TypeName = typeName
      )
    )

  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "serviceinterface.go"
    )

  !view methodDef(ep <: sysl.Endpoint) -> string:
    ep -> (:
      let terms = ep.value.pathvars -> <out> (:
        out = "{" + .name + "}"
      )
      let pathVars = terms flatten(.out)
      let path = Split(ep.value.path, "/")
      let method = Title(ToLower(ep.value.method))

      let methodPostfix = path -> <string> (:
        let postfix  = if . in pathVars then "" else .
        out = Title(ToLower(postfix))
      )

      let withArg = if MatchString("\\{\\p{L}+\\}$", ep.value.path) && Contains("POST", ToUpper(method)) then "WithArg" else ""
      let getList = if MatchString("[\\p{L}\\p{N}]$", ep.value.path) && Contains("GET", ToUpper(method)) then "List" else ""


      methodName = GoName(method + Join(methodPostfix flatten(.out), "") + withArg + getList).out
    )

  !view getPackagePrefix(payload <: string, module <: sysl.Module) -> string:
    payload -> (:
      let packages = Split(payload, ".") -> <set of string>(p:
        let depList = module.apps where(.value.name == p) -> <set of string> (dep:
          pkg = getPackage(dep.value).pname
          appName = p
        )
        pkg = depList flatten(.pkg)
        appName = depList flatten(.appName)
      )
      out = if packages flatten(.pkg) count == 0 then "" else packages flatten(.pkg) single + "."
      appName = if packages flatten(.appName) count == 0 then "" else packages flatten(.appName) single
    )

  !view makeType(input <: string, package <: string) -> string:
    input -> (:
      let pkgString = if package == "" then "" else package + "."
      let userType = if HasPrefix(input, "sequence of") then "*[]" + pkgString + GoName(TrimPrefix(input, "sequence of ")).out else "*" + pkgString + GoName(input).out
      out = if input in ["error"] then input else userType
    )

  !view makeResultWithClientPackage(ep <: sysl.Endpoint, package <: string) -> Result:
    ep -> (:
      ReturnTypes = ep -> <ReturnTypes>(:
        let tn = ep.value.ret where (.key != "error" && .value != "ok" && .value != "error") -> <sequence of string>(t:
          out = makeType(t.value, package).out
        )
        TypeName = Join(tn flatten(.out) | ["error"], ", ")
      )
    )

  !view makeResultDetectPackage(ep <: sysl.Endpoint, module <: sysl.Module) -> Result:
    ep -> (:
      ReturnTypes = ep -> <ReturnTypes>(:
        let tn = ep.value.ret where (.key != "error" && .value != "ok") -> <set of string>(t:
          let packages = Split(t.value, ".") -> <set of string>(p:
            let app = if HasPrefix(p, "sequence of") then TrimPrefix(p, "sequence of ") else p
            let depList = module.apps where(.value.name == app) -> <set of string> (dep:
              pkg = getPackage(dep.value).pname
              prefix = app
            )
            pkg = depList flatten(.pkg)
            prefix = depList flatten(.prefix)
          )
          let prefix = if packages flatten(.prefix) count == 0 then "" else packages flatten(.prefix) single + "."
          let package = if packages flatten(.pkg) count == 0 then "" else packages flatten(.pkg) single

          out = makeType(Replace(t.value, prefix, "", -1), package).out
        )
        TypeName = Join(tn flatten(.out)  | {"error"}, ", ")
      )
    )

  !view epHandlerMethodSpecsNoClient(eps <: sequence of sysl.Endpoint, package <: string, module <: sysl.Module) -> sequence of FieldDecl:
    eps -> (ep:
      identifier = methodDef(ep).methodName
      FunctionType = ep -> <FunctionType>(:
        Signature = ep -> <Signature> (:
          Parameters = ep -> <Parameters>(:
            ParameterList = ep -> <ParameterList>(:
              ParameterDecl = ep -> <ParameterDecl>(:
                Identifier = "ctx"
                TypeName = "context.Context"
              )
              ParameterDeclC = [ep] -> <sequence of ParameterDeclC>(e:
                ParameterDecl = ep -> <ParameterDecl>(:
                  Identifier = "req"
                  TypeName = "*" + package + "." + methodDef(ep).methodName + "Request"
                )
              )
            )
          )
          Result = makeResultWithClientPackage(ep, package)
        )
      )
    )

  !view epHandlerMethodSpecsWithClient(eps <: sequence of sysl.Endpoint, module <: sysl.Module) -> sequence of FieldDecl:
    eps -> (ep:
      identifier = methodDef(ep).methodName
      FunctionType = ep -> <FunctionType>(:

        Signature = ep -> <Signature> (:
          Parameters = ep -> <Parameters>(:
            ParameterList = ep -> <ParameterList>(:
              ParameterDecl = ep -> <ParameterDecl>(:
                Identifier = "ctx"
                TypeName = "context.Context"
              )
              let req = ep -> <ParameterDeclC>(:
                ParameterDecl = ep -> <ParameterDecl>(:
                  Identifier = "req"
                  TypeName = "*" + methodDef(ep).methodName + "Request"
                )
              )
              let client = ep -> <ParameterDeclC>(:
                ParameterDecl = ep -> <ParameterDecl>(:
                  Identifier = "client"
                  TypeName = methodDef(ep).methodName + "Client"
                )
              )
              ParameterDeclC = [req, client]
            )
          )
          Result = makeResultDetectPackage(ep, module)
        )
      )
    )

  !view handlerClients(app <: sysl.App, module <: sysl.Module) -> sequence of TopLevelDecl:
    app.endpoints where(.value.is_rest == true) -> (ep:
      Comment = "// " + methodDef(ep).methodName + " Client"
      Declaration = ep -> <Declaration> (:
        StructType = ep -> <StructType> (:
          StructName = methodDef(ep).methodName + "Client"

          let callList = ep.value.stmts where (.type == "call") -> <sequence of out> (call:
            let depList = module.apps where(.value.name == call.target) -> <sequence of out> (dep:
              out = epHandlerMethodSpecsNoClient(dep.value.endpoints where(.value.name == call.endpoint), getPackage(dep.value).pname, module)
            )
            out = depList flatten(.out) flatten(.)
          )
          let dbParamEntry = "dbParamEntry" -> <FieldDecl>(:
            identifier = "conn"
            Type = "*sql.Conn"
          )
          let FieldDeclWithDB = [dbParamEntry] | SetQueryAttributes(ep).out |callList flatten(.out) flatten(.)
          let FieldDeclWithoutDB = callList flatten(.out) flatten(.)
          FieldDecl = if IsDataBaseApp(app).out then FieldDeclWithDB else FieldDeclWithoutDB
        )
      )
    )

  !view makeClientImportList(app <: sysl.App, module <: sysl.Module) -> set of string:
    app.endpoints where(.value.is_rest == true) -> (ep:
      let callList = ep.value.stmts where (.type == "call") -> <set of out> (call:
        let depList = module.apps where(.value.name == call.target) -> <set of out> (dep:
          out = getPackage(dep.value).pname
        )
        out = depList flatten(.out)
      )
      out = callList flatten(.out)
    )

  !view goFile(app <: sysl.App, module <: sysl.Module, basePath <: string) -> goFile:
    app -> (:

      PackageClause = app -> <package> (:
        let pname = getPackage(app).pname
        PackageName = ToLower(pname)
      )

      ImportDecl = app -> <ImportDecl>(:
        let clientImports = makeClientImportList(app, module) flatten(.out) -> <set of string>(i:
          out = basePath  + "/" + i
        )
        let config = "github.com/anz-bank/sysl-go/config"
        let databaseImport = "database/sql"
        let initWithoutDB = [config, "context", "time"]
        let initWithDB = initWithoutDB | [databaseImport]

        let spec = if IsDataBaseApp(app).out then initWithDB else initWithoutDB | clientImports flatten(.out) -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec
      )

      let svcImplInterface = [.name] -> <sequence of TopLevelDecl> (name:
        let title = "ServiceInterface"
        Comment = "// " + title + " for " + name
        Declaration = title -> <Declaration>(:
          StructType = title -> <StructType>(:
            StructName = title
            FieldDecl = epHandlerMethodSpecsWithClient(app.endpoints, module)
          )
        )
      )

      let structName = "Default" + GoName(.name).out + "Impl"

      let defaultImplStruct = [.name] -> <sequence of TopLevelDecl> (name:
        Comment = "// " + structName + " ..."
        Declaration = name -> <Declaration>(:
          StructType = name -> <StructType>(:
            StructName = structName
          )
        )
      )

      let newDefaultImpl = [.name] -> <sequence of TopLevelDecl> (name:
        let funcName = "New" + structName
        Comment = "// " + funcName + " for " + name
        FunctionDecl = name -> <FunctionDecl>(:
          FunctionName = funcName
          Signature = name -> <Signature> (:
            Parameters = name -> <Parameters>(:
              ParameterList = name -> <ParameterList>(:
                ParameterDecl = name -> <ParameterDecl>(:
                  Identifier = ""
                  TypeName = ""
                )
              )
            )

            Result = name -> <Result> (:
              TypeName = "*"+structName
            )
          )
          Block = name -> <Block>(:
            StatementList = [.] -> <sequence of StatementList>(item:
              Statement = item -> <Statement> (:
                ReturnStmt = item -> <ReturnStmt> (:
                  PayLoad = "&" + structName + "{}"
                )
              )
            )
          )
        )
      )

      let downstreamConfigImpl = [.name] -> <sequence of TopLevelDecl> (name:
        let funcName = "DownstreamConfig"
        Comment = "// " + funcName + " for " + name
        Declaration = name -> <Declaration>(:
          StructType = name -> <StructType>(:
            StructName = funcName
            let context = name -> <FieldDecl>(:
              identifier = "ContextTimeout"
              Type =  "time.Duration"
              Tag = '`yaml:"contextTimeout"`'
            )
            let downstreamAppList = makeClientImportList(app, module) flatten(.out) -> <set of string>(i:
              out = i
            )
            let depList = downstreamAppList flatten(.out) -> <sequence of FieldDecl> (importPath:
              identifier = GoName(importPath).out
              Type =  "config.CommonDownstreamData"
              Tag = '`yaml:"' + importPath + '"`'
            )
            FieldDecl = [context] | depList
          )
        )
      )

      Comment = "// Code generated by sysl DO NOT EDIT.\n"

      TopLevelDecl = defaultImplStruct | newDefaultImpl | handlerClients(app, module) | svcImplInterface | downstreamConfigImpl
    )

  !view IsDataBaseApp(app <: sysl.App) -> string:
    app -> (:
      let Patterns = if app.attrs count > 0 && "patterns" in app.attrs then app.attrs.patterns else [""]
      out = if "DB" in Patterns then true else false
    )

  !view SetQueryAttributes(ep <: sysl.Endpoint) -> string:
    ep -> (:
      let tn = ep.attrs where (HasPrefix(.key, "sql_")) -> <sequence of string>(t:
        out = "out" -> <FieldDecl>(:
          identifier = ToLower(TrimPrefix(t.key,"sql_"))
          Type = "*sql.Stmt"
        )
      )
      out = tn flatten(.out)
    )

  !view getPackage(app <: sysl.App) -> string:
    app -> (:
      pname = if "package" in .attrs then if .attrs.package != null then .attrs.package else ToLower(.name) else ToLower(.name)
    )
