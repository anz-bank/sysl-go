CodeGenTransform:
  !view GoName(word <: string) -> string:
    word -> (:
      let splitted = if MatchString("^[\\p{L}_][\\p{L}\\p{N}_]*$", word) then [word] else FindAllString("[\\p{L}_][\\p{L}\\p{N}_]*", word, -1)

      # Common initialisms https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
      let initialisms = ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS"]

      let wordUpper = splitted -> <sequence of string> (w:
        let upper = ToTitle(TrimPrefix(w,"_"))
        out = if upper in initialisms then upper else Title(w)
      )
      out = Join(wordUpper flatten(.out), "")
    )

  !view ParamType(t <: sysl.Type) -> string:
    t -> (:
      let IsPtr = if t.optional == true && t.type != "sequence" then "*" else ""
      let typeName = if t.type ==:
        "primitive" => if t.primitive ==:
          "DECIMAL" => "double"
          "INT" => "int64"
          "FLOAT" => "float64"
          "STRING" => "string"
          "STRING_8" => "string"
          "BOOL" => "bool"
          "DATE" => "date.Date"
          "DATETIME" => "time.Time"
        "sequence" => "[]" + GoType(t.sequence).out
        else GoName(t.type_ref).out
      out = IsPtr + typeName
    )
    
  !view paramDecl(identifier <: string, typeName <: string) -> ParameterDeclC:
    identifier -> (:
      ParameterDecl = identifier -> <ParameterDecl>(:
        Identifier = identifier
        TypeName = typeName
      )
    )

  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "grpc_interface.go"
    )
        
  !view methodDef(ep <: sysl.Endpoint) -> string:
    ep -> (:
      let terms = if ep.value.is_rest then ep.value.pathvars else ["x"] where (. == "y") -> <out> (:
        out = "{" + .name + "}"
      )
      let pathVars = terms flatten(.out)
      let path = if ep.value.is_rest then Split(ep.value.path, "/") else [""]
      let method = if ep.value.is_rest then Title(ToLower(ep.value.method)) else ep.value.name

      let methodPostfix = path -> <string> (:
        let postfix  = if . in pathVars then "" else .
        out = Title(ToLower(postfix))
      )

      let withArg = if ep.value.is_rest then if MatchString("\\{\\p{L}+\\}$", ep.value.path) && Contains("POST", ToUpper(method)) then "WithArg" else "" else ""
      let getList = if ep.value.is_rest then if MatchString("[\\p{L}\\p{N}]$", ep.value.path) && Contains("GET", ToUpper(method)) then "List" else "" else ""


      methodName = GoName(method + Join(methodPostfix flatten(.out), "") + withArg + getList).out
    )

  !view getPackagePrefix(payload <: string, module <: sysl.Module) -> string:
    payload -> (:
      let packages = Split(payload, ".") -> <set of string>(p:
        let depList = module.apps where(.value.name == p) -> <set of string> (dep:
          pkg = getPackage(dep.value).pname
          appName = p
        )
        pkg = depList flatten(.pkg)
        appName = depList flatten(.appName)
      )
      out = if packages flatten(.pkg) count == 0 then "" else packages flatten(.pkg) single + "."
      appName = if packages flatten(.appName) count == 0 then "" else packages flatten(.appName) single
    )

  !view makeType(input <: string, package <: string) -> string:
    input -> (: 
      let pkgString = if package == "" then "" else package + "."
      let userType = if HasPrefix(input, "sequence of") then "*[]" + pkgString + GoName(TrimPrefix(input, "sequence of ")).out else "*" + pkgString + GoName(input).out
      out = if input in ["error"] then input else userType
    )

  !view epHandlerMethodSpecsWithClient(eps <: sequence of sysl.Endpoint, packageName <: string, module <: sysl.Module) -> sequence of FieldDecl:
    eps -> (ep:
      let methodName = methodDef(ep).methodName

      let client = methodName -> <ParameterDeclC>(:
        ParameterDecl = methodName -> <ParameterDecl>(:
          Identifier = "client"
          TypeName = . + "Client"
        )
      )

      let req = methodName -> <ParameterDeclC>(:
        ParameterDecl = methodName -> <ParameterDecl>(:
          Identifier = "req"
          TypeName = "*" + packageName + "." + . + "Request"
        )
      )

      identifier = methodDef(ep).methodName
      FunctionType = ep -> <FunctionType>(:
        
        Signature = ep -> <Signature> (:
          Parameters = ep -> <Parameters>(:
            ParameterList = ep -> <ParameterList> (:
              ParameterDecl = ep -> <ParameterDecl>(:
                Identifier = "ctx"
                TypeName = "context.Context"
              )
              ParameterDeclC = [req, client]
            )
          )
          Result = ep -> <Result>(:
            ReturnTypes = ep -> <ReturnTypes>(:
              TypeName = "*" + packageName + "." + methodDef(ep).methodName + "Response"
              ResultTypeList = ["error"] -> <sequence of ResultTypeList>(r:
                TypeName = r
              )
            )
          )
        )
      )
    )

  !view makeClientImportList(app <: sysl.App, module <: sysl.Module) -> set of string:
    app.endpoints -> (ep:
      let callList = ep.value.stmts where (.type == "call") -> <set of out> (call:
        let depList = module.apps where(.value.name == call.target) -> <set of out> (dep:
          out = if "go_package" in dep.value.attrs then dep.value.attrs.go_package else getPackage(dep.value).pname
        )
        out = depList flatten(.out)
      )
      out = callList flatten(.out)
    )

  !view getAllParams(ep <: sysl.Endpoint, extraParams <: sequence of string, package <: string, module <: sysl.Module) -> AllParams:
    ep -> (:
      let queryParams = ep.value.queryvars where (.optional == false) -> <sequence of QueryParams> (param:
        arg = GoName(param.name).out + " " + ParamType(param).out
      )
      let optionalQueryParams = ep.value.queryvars where (.optional == true) -> <sequence of QueryParams> (param:
        arg = GoName(param.name).out+ " " + ParamType(param).out
      )
      let pathParams = ep.value.pathvars -> <sequence of PathParams> (param:
        arg = GoName(param.name).out + " " + ParamType(param).out
      )
      let reqHeaderParams = ep.value.params where("header" in .attrs.patterns && "required" in .attrs.patterns) -> <sequence of HeaderParams> (param:
        paramName =  GoName(param.name).out + " " + ParamType(param).out
      )
      let optHeaderParams = ep.value.params where("header" in .attrs.patterns && "optional" in .attrs.patterns) -> <sequence of HeaderParams> (param:
        paramName = GoName(param.name).out + " " + ParamType(param).out
      )
      let bodyParams = ep.value.params where("body" in .attrs.patterns) -> <sequence of BodyParams> (param:
        let p = getPackagePrefix(param.type_ref, module)
        let t = TrimPrefix(param.type_ref, p.appName)
        let prefix = if package == "" then p.out else package + "."
        
        arg = GoName(param.name).out + " *" + prefix + GoName(t).out
      )

      AllParams = ["ctx context.Context"] | pathParams flatten(.arg) | queryParams flatten(.arg) | optionalQueryParams flatten(.arg) | bodyParams flatten(.arg) | extraParams
    )

  !view makeResultWithClientPackage(ep <: sysl.Endpoint, package <: string) -> Result:
    ep -> (:
      ReturnTypes = ep -> <ReturnTypes>(:
        let tn = ep.value.ret where (.key != "error" && .value != "error") -> <sequence of string>(t:
          out = makeType(t.value, package).out
        )
        TypeName = Join(tn flatten(.out) | ["error"], ", ")
      )
    )

  !view makeParams(ep <: sysl.Endpoint, package <: string) -> Parameters:
    ep -> (:
      ParameterList = ep -> <ParameterList>(:
        ParameterDecl = paramDecl("ctx", "context.Context").ParameterDecl
        ParameterDeclC = ["req"] -> <sequence of ParameterDeclC>(ident:
          ParameterDecl = paramDecl(ident, "*" + package + "." + methodDef(ep).methodName + "Request").ParameterDecl
        )
      )
    )

  !view epHandlerMethodSpecsNoClient(eps <: sequence of sysl.Endpoint, package <: string, module <: sysl.Module) -> sequence of FieldDecl:
    eps -> (ep:
      let emptyList = [""] where (. != "") -> <sequence of string> (s:
        out = s
      )
      identifier = methodDef(ep).methodName
      FunctionType = ep -> <FunctionType>(:
        Signature = ep -> <Signature> (:
          Parameters = makeParams(ep, package)
          Result = makeResultWithClientPackage(ep, package)
        )
      )
    )

  !view handlerClients(app <: sysl.App, module <: sysl.Module) -> sequence of TopLevelDecl:
    app.endpoints where(.value.is_rest == false) -> (ep:

      Comment = "// " + ep.value.name + " Client"
      Declaration = ep -> <Declaration> (:
        StructType = ep -> <StructType> (:
          StructName = ep.value.name + "Client"

          let callList = ep.value.stmts where (.type == "call") -> <sequence of out> (call:
            let depList = module.apps where(.value.name == call.target) -> <sequence of out> (dep:
              out = epHandlerMethodSpecsNoClient(dep.value.endpoints where(.value.name == call.endpoint), getPackage(dep.value).pname, module)
            )
            out = depList flatten(.out) flatten(.)
          )
          FieldDecl = callList flatten(.out) flatten(.)
        )
      )
    )

  !view goFile(app <: sysl.App, module <: sysl.Module, depPath <: string) -> goFile:
    app -> (:
      let packageName = if "go_package" in .attrs then .attrs.go_package else if "package" in .attrs then ToLower(.attrs.package) else ToLower(app.name)
      let grpcPkgName = "pb"

      PackageClause = app -> <package> (:
        PackageName = packageName
      )

      ImportDecl = app -> <ImportDecl>(:
        let clientImports = makeClientImportList(app, module) flatten(.out) -> <set of string>(i:
          out = depPath + "/" + i
        )
        
        let goPbPackage = if "go_pb_package" in .attrs then .attrs.go_pb_package else "pb"

        let grpcDefs = grpcPkgName -> <ImportSpec>(:
          NamedImport = grpcPkgName -> <NamedImport>(:
            Name = grpcPkgName
            Import = '"' + goPbPackage + '"'
          )
        )

        let spec = ["context"] | clientImports flatten(.out) -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec | [grpcDefs]
      )

      let svcImplInterface = [.name] -> <sequence of TopLevelDecl> (name:
        let title = "GrpcServiceInterface"
        Comment = "// GrpcServiceInterface for "  + name
        Declaration = title -> <Declaration>(:
          StructType = title -> <StructType>(:
            StructName = title
            FieldDecl =  epHandlerMethodSpecsWithClient(app.endpoints, grpcPkgName, module)
          )
        )
      )

      let downstreamConfigImpl = [.name] -> <sequence of TopLevelDecl> (name:
        let funcName = "DownstreamConfig"
        Comment = "// " + funcName + " for " + name
        Declaration = name -> <Declaration>(:
          StructType = name -> <StructType>(:
            StructName = funcName
            let context = name -> <FieldDecl>(:
              identifier = "ContextTimeout"
              Type =  "time.Duration"
              Tag = '`yaml:"contextTimeout"`'
            )
            let downstreamAppList = makeClientImportList(app, module) flatten(.out) -> <set of string>(i:
              out = i
            )
            let depList = downstreamAppList flatten(.out) -> <sequence of FieldDecl> (importPath:
              identifier = GoName(importPath).out
              Type =  "config.CommonDownstreamData"
              Tag = '`yaml:"' + importPath + '"`'
            )
            FieldDecl = [context] | depList
          )
        )
      )

      Comment = "// Code generated by sysl DO NOT EDIT.\n"

      TopLevelDecl =  handlerClients(app, module) | svcImplInterface | downstreamConfigImpl
    )

  !view getPackage(app <: sysl.App) -> string:
    app -> (:
      pname = if "go_package" in .attrs then .attrs.go_package else if "package" in .attrs then .attrs.package else ToLower(.name)
    )
