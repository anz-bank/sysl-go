CodeGenTransform:
  !view filename(app <: sysl.App) -> string:
    app -> (:
      filename =  "app.go"
    )

  !view makeValueExpr(strValue <: string) -> Expression:
    strValue -> (:
      ValueExpr = strValue
    )

  !view makeMethodCallExpr(app <: sysl.App, module <: sysl.Module, expr1 <: string, expr2 <: string) -> Expression:
    app -> (:
      let clientPkgs = makeClientPkgList(app, module) flatten(.out) -> <set of string>(pkg:
        out = pkg + "Client"
      )      
      ValueExpr = "NewServiceHandler(" + expr1 + "," + expr2 + "," + Join(clientPkgs flatten(.out), ",") + ")"
    )

  !view makeInitialiseHandlers(app <: sysl.App, module <: sysl.Module) -> TopLevelDecl:
    app -> (:
      Comment = '// InitialiseHandlers ...'
      FunctionDecl = app -> <FunctionDecl>(:
        FunctionName = "InitialiseHandlers"
        Signature = app -> <Signature>(:
          Parameters = app -> <Parameters>(:
            ParameterList = app -> <ParameterList>(:
              ParameterDecl = app -> <ParameterDecl>(:
                Identifier = "coreCfg"
                TypeName = "*config.DefaultConfig"
              )
              let serviceInterface = app -> <ParameterDeclC>(:
                ParameterDecl = app -> <ParameterDecl>(:
                  Identifier = "serviceInterface"
                  TypeName = "ServiceInterface"
                )
              )
              let serviceCallback = app -> <ParameterDeclC>(:
                ParameterDecl = app -> <ParameterDecl>(:
                  Identifier = "serviceCallback"
                  TypeName = "core.RestGenCallback"
                )
              )
              ParameterDeclC = [serviceInterface] |  [serviceCallback]
            )
          )
          Result = app -> <Result>(:
            TypeName = "(*HandlerInit, error)"
          )
        )
        Block = app -> <Block>(:
          let errorDecl = app -> <StatementList> (:
            Statement = app -> <Statement>(:
              AssignStmt = app -> <AssignStmt> (:
                Variables = "var err error"
                Expression = makeValueExpr("nil")
              )
            )
          )
          let clientPkgs = makeClientPkgList(app, module) flatten(.out) -> <set of string>(pkg:
            pkgHttpClientStmt = pkg -> <StatementList> (:
              Statement = pkg -> <Statement>(:
                DeclareAndAssignStmt = pkg -> <DeclareAndAssignStmt> (:
                  Variables = pkg + "HTTPClient" + ",  "+ ToLower(pkg) + "Err"
                  Expression = makeValueExpr("core.BuildDownstreamHTTPClient(\"" + ToLower(pkg) + "\", &coreCfg.GenCode.Downstream.(*DownstreamConfig)." + Title(ToLower(pkg)) + ")")
                )
              )
            )
            ifStmt = pkg -> <StatementList>(:
              Statement = pkg -> <Statement>(:
                IfElseStmt = pkg -> <IfElseStmt> (:
                  Expression = makeValueExpr(ToLower(pkg) + "Err" + " != nil")
                  Block = pkg -> <Block> (:
                    let stmt = pkg -> <StatementList> (:
                      Statement = pkg -> <Statement> (:
                        ReturnStmt = pkg -> <ReturnStmt> (:
                          PayLoad = "nil, " + ToLower(pkg) + "Err"
                        )
                      )
                    )
                    StatementList = [stmt]
                  )
                )
              )
            )
            pkgClientStmt = pkg -> <StatementList> (:
              Statement = pkg -> <Statement>(:
                DeclareAndAssignStmt = pkg -> <DeclareAndAssignStmt> (:
                  Variables = ToLower(pkg) + "Client"
                  Expression = makeValueExpr(ToLower(pkg) + ".NewClient(" + ToLower(pkg) + "HTTPClient, coreCfg.GenCode.Downstream.(*DownstreamConfig)." + Title(ToLower(pkg)) + ".ServiceURL)")
                )
              )
            )
          )

          let serviceHandlerStmt = app -> <StatementList> (:
            Statement = app -> <Statement>(:
              DeclareAndAssignStmt = app -> <DeclareAndAssignStmt> (:
                Variables = "serviceHandler"
                Expression = makeMethodCallExpr(app, module, "serviceCallback", "&serviceInterface")
              )
            )
          )

          let serviceRouterStmt = app -> <StatementList> (:
            Statement = app -> <Statement>(:
              DeclareAndAssignStmt = app -> <DeclareAndAssignStmt> (:
                Variables = "serviceRouter"
                Expression = makeValueExpr("NewServiceRouter(serviceCallback, serviceHandler)")
              )
            )
          )

          let restHandlersStmt = app -> <StatementList> (:
            Statement = app -> <Statement>(:
              DeclareAndAssignStmt = app -> <DeclareAndAssignStmt> (:
                Variables = "httpHandlers"
                Expression = makeValueExpr("[]handlerinitialiser.HandlerInitialiser{serviceRouter}")
              )
            )
          )

          let retStmt = app -> <StatementList>(:
            Statement = app -> <Statement>(:
              ReturnStmt = app -> <ReturnStmt>(:
                PayLoad = "&HandlerInit{RestHandlers: httpHandlers}, err"
              )
            )
          )
          StatementList = [errorDecl] | clientPkgs flatten(.pkgHttpClientStmt) | clientPkgs flatten(.ifStmt) | clientPkgs flatten(.pkgClientStmt) | [serviceHandlerStmt, serviceRouterStmt, restHandlersStmt, retStmt]
        )
      )
    )

  !view makeClientPkgList(app <: sysl.App, module <: sysl.Module) -> set of string:
    app.endpoints -> (ep:
      let callList = ep.value.stmts where (.type == "call") -> <set of out> (call:
        let depList = module.apps where(.value.name == call.target) -> <set of out> (dep:
          out = dep.value.attrs.package
        )
        out = depList flatten(.out)
      )
      out = callList flatten(.out)
    )   

  !view goFile(app <: sysl.App, module <: sysl.Module, basePath <: string) -> goFile:
    app -> (:
      PackageClause = app -> <PackageClause> (:
        let pname = if .attrs.package != null then .attrs.package else ToLower(app.name)
        PackageName = ToLower(pname)
      )

      ImportDecl = app -> <ImportDecl>(:
        let config = "github.com/anz-bank/sysl-go/config"
        let core = "github.com/anz-bank/sysl-go/core"
        let handlerinitialiser = "github.com/anz-bank/sysl-go/handlerinitialiser"
        let clientImports = makeClientPkgList(app, module) flatten(.out) -> <set of string>(i:
          out = basePath + "/" + i
        )
        let spec = ["context", config, core, handlerinitialiser] -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        let ci = clientImports flatten(.out) -> <sequence of ImportSpec> (importPath:
          Import = if importPath == "" then true else '"' + importPath + '"'
        )
        ImportSpec = spec | ci
      )

      let handlerInitStruct = [.name] -> <sequence of TopLevelDecl> (name:
        Comment = "// HandlerInit for " + name
        Declaration = name -> <Declaration>(:
          StructType = name -> <StructType>(:
            StructName = "HandlerInit"
            let restHandlers = name -> <FieldDecl>(:
              identifier = "RestHandlers"
              Type = "[]handlerinitialiser.HandlerInitialiser"
            )

            let grpcHandlers = name -> <FieldDecl>(:
              identifier = "GrpcHandlers"
              Type = "[]handlerinitialiser.GrpcHandlerInitialiser"
            )
            FieldDecl = [restHandlers, grpcHandlers]
          )
        )
      )
      Comment = "// Code generated by sysl DO NOT EDIT.\n"
      TopLevelDecl = handlerInitStruct | [makeInitialiseHandlers(app, module)]
    )
