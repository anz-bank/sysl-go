let go = //{./go};

\(:app, :appname, :basepath, :restEndpoints, ...) $`
    ${go.prelude(app, {})}

    // Router interface for ${appname}
    type Router interface {
        Route(router *chi.Mux)
    }

    // ServiceRouter for ${appname} API
    type ServiceRouter struct {
        gc               core.RestGenCallback
        svcHandler       *ServiceHandler
        basePathFromSpec string
    }

    // swaggerFile is a struct to store the swagger file system
    type swaggerFile struct {
        file http.FileSystem
    }

    // swagger will receive the embedded swagger file if it is generated by the resource application
    var swagger = swaggerFile{}

    // NewServiceRouter creates a new service router for ${appname}
    func NewServiceRouter(gc core.RestGenCallback, svcHandler *ServiceHandler) handlerinitialiser.HandlerInitialiser {
        return &ServiceRouter{gc, svcHandler, "${app('attrs')('basePath')?('s').s:""}"}
    }

    // WireRoutes ...
    //nolint:funlen
    func (s *ServiceRouter) WireRoutes(ctx context.Context, r chi.Router) {
        r.Route(core.SelectBasePath(s.basePathFromSpec, s.gc.BasePath()), func(r chi.Router) {
            s.gc.AddMiddleware(ctx, r)
            ${restEndpoints >> \(@value: ep, ...)
                ep('restParams') ->
                    let method = //str.title(//str.lower(.('method').s));
                    $`r.${method}("${.('path').s}", s.svcHandler.${go.methodName(ep)}Handler)`
            ::\i}
        })
    }

    // Config ...
    func (s *ServiceRouter) Config() interface{} {
        return s.gc.Config()
    }

    // Name ...
    func (s *ServiceRouter) Name() string {
        return "${appname}"
    }
`
