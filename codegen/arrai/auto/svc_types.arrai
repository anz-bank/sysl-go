let go = //{./go};
let sysl = //{./sysl};
let validation = //{./validation};

let orderedTypes = \types
    (types orderby .@) >> . +> (typename: go.name(.@));

let fieldJsonTag = \type \key
    cond type {
        {'attrs': {'json_tag': tag, ...}, ...}: [tag('s').s],
            _: [key],
    };

\(:app, :endpoints, :module, ...)
    let entities = orderedTypes(
        app('types')?:{} where
            !({"error", "unmapped_openapi"} & sysl.patterns(.@value)) &&
            (
                {"tuple", "relation"} & (.@value => .@) ||
                .@value('attrs')?('openapi_type')?('s')?.s:'' = 'object'
            )
    );
    let aliases = orderedTypes(app('types')?:{} where ({'typeRef', 'primitive', 'sequence'} & (.@value => .@)));
    let unions = orderedTypes(app('types')?:{} where ({'oneOf', 'oneof'} & (.@value => .@)));
    let allUnionTypes = //rel.union(unions => (.@item.@value('oneOf')('type').a >> .('typeRef')('ref')('path').a >> ((.) single).@item.s => .@item));
    # for alias types also include the type they point to
    let allUnionTypes = //rel.union(allUnionTypes => {., go.aliasOrType(app, .)});
    let validateApp = sysl.patterns(app) & {"validate"};
    $`
        ${go.prelude(app, {})}

        ${entities >> \(@: key, @value: value, :typename)
            let attrDefs = value('tuple')?:(value('relation')?:{})('attrDefs')?:{};
            let patterns = sysl.patterns(value);
            let descr = cond value {{'attrs': {'description': {'s': (s: descr), ...}, ...}, ...}: descr, _: "..."};
            let validateEntity = ({"validate"} & patterns || validateApp);
            $`
                // ${typename} ${//seq.split('\n', //seq.trim_suffix('\n',descr))::\i // }
                type ${typename} struct {
                    ${attrDefs orderby .@ >> \(@: key, @value: attrDef)
                        let fieldName = go.name(key);
                        let jsonTag =
                            cond {
                                {"no_json", "pk"} & sysl.patterns(attrDef): ["-"],
                                _: fieldJsonTag(attrDef, key),
                            }
                            ++
                            (cond {
                                !sysl.type.required(attrDef): ['omitempty'],
                                _: [],
                            });
                        let validateTag =
                            # if there is a validate tag use it
                            cond attrDef {{'attrs': {'validate': {'s': (s: tag), ...}, ...}, ...}: tag}
                            || cond {
                                # if this entity is marked for validation
                                validateEntity: validation.validationTagForType(attrDef),
                            };

                        # Purpose: add url field tags to support scenario where we need
                        # to marshal the structure into a HTTP request body for a
                        # application/x-www-form-urlencoded POST request.
                        #
                        # For each json field tag we define a url field tag with the
                        # same value. url field tags are intended to be interpreted by
                        # the library github.com/google/go-querystring.
                        #
                        # Copying across the json tags is a bit of a hack and may not work in
                        # general:
                        # 1. not all valid JSON field tags are valid url tags;
                        # 2. only a subset of go field types are supported when marshaling
                        #    into an application/x-www-form-urlencoded request body.
                        #
                        # Ref: https://pkg.go.dev/github.com/google/go-querystring@v1.0.0/query
                        # Ref: see restlib/restlib.go & restlib/urllencode.go
                        let urlTag = jsonTag;

                        let structTags = [$`json:"${jsonTag::,}"`]
                            ++ [$`url:"${urlTag::,}"`]
                            ++ cond { validateTag: [$`validate:"${validateTag}"`] };
                        $'
                        ${fieldName} ${go.leafOrFullType(module, app, attrDef)} `${//seq.join(' ', structTags)}`'
                    ::\i}
                }
                ${cond {typename <: go.errorReturnTypes(app): $`
                    // Error fulfills the error interface.
                    func (s ${typename}) Error() string {
                        type plain ${typename}
                        return fmt.Sprintf("%+v", plain(s))
                    }
                `}}
                ${
                    let reqParams = attrDefs where !sysl.isPtr(.@value);
                    let regexParams = attrDefs where .@value('attrs')?('regex')?:{};
                    let needsUnmarshalJSON = validateEntity && (reqParams || regexParams);

                    cond {needsUnmarshalJSON || (key <: allUnionTypes): $`
                        func unmarshalJSONWithValidation${typename}(data []byte) (*${typename}, bool, error) {
                            inner := struct {
                                ${attrDefs orderby .@ >> \(@: key, @value: attrDef)
                                    $'${go.name(key)} ${cond { !sysl.isPtr(attrDef) : '*', _ : ''}}${go.type(module, app, attrDef)} `json:"${fieldJsonTag(attrDef, key)::,},omitempty"`'
                                ::\i}
                            }{}
                            err := json.Unmarshal(data, &inner)
                            if err != nil {
                                return nil, false, err
                            }
                            filled := 0
                            ${attrDefs where !sysl.isPtr(.@value) orderby .@ >> \(@: key, @value: attrDef)
                                $`
                                    if inner.${go.name(key)} == nil {
                                        return nil, false, errors.New("${fieldJsonTag(attrDef, key)::,} cannot be nil")
                                    } else {
                                        filled++
                                    }
                                `
                            ::\i}
                            ${attrDefs where sysl.isPtr(.@value) orderby .@ >> \(@: key, @value: attrDef)
                                $`
                                    if inner.${go.name(key)} != nil {
                                        filled++
                                    }
                                `
                            ::\i}

                            ${regexParams orderby .@ >> \(@: key, @value: attrDef)
                                $`
                                    if inner.${go.name(key)} != nil {
                                        re := common.RegexWithFallbackMustCompile(``${attrDef('attrs')('regex')('s').s}``)
                                        if !re.MatchString(*inner.${go.name(key)}) {
                                            return nil, false, errors.New("${fieldJsonTag(attrDef, key)::,} does not fit the required regex")
                                        }
                                    }
                                `
                            ::\i}


                            return &${typename}{
                                ${attrDefs orderby .@ >> \(@: key, @value: attrDef)
                                    let fieldName = go.name(key);
                                    $`${fieldName}: ${cond { !sysl.isPtr(attrDef) : '*', _ : ''}}inner.${fieldName},`
                                ::\i}
                            }, filled > 0, nil
                        }

                        ${
                            cond {needsUnmarshalJSON: $`
                                func (t *${typename}) UnmarshalJSON(data []byte) error {
                                    val, _, err := unmarshalJSONWithValidation${typename}(data)
                                    if err != nil {
                                        return err
                                    }
                                    *t = *val

                                    return nil
                                }
                            `}
                        }
                    `}
                }
            `
        ::\i}
        ${entities where "json_map_key" <: (.@item.@value('attrs')?:{} => .@) >> \(@: key, ...) $`
            // Generate wrapper set type
            type ${key}Set struct {
                M map[string]${key}
            }

        `::\i}
        ${endpoints >> \(@value: ep, ...)
            let typename = $`${go.methodName(app, ep)}Request`;
            let paramTags = validation.paramValidateTags(ep) => (:.@, @value:$'`validate:"${.@value}"`');
            $`
                // ${typename} ...
                type ${typename} struct {
                    ${
                        (ep('param')?.a:{}) where "body" <: sysl.patterns(.@item('type')) >>
                            $`Request ${go.bodyType(module, app, .('type'))}`
                    ::\i}
                    ${ep('restParams')?:{}
                        -> (.('queryParam')?.a:{}) ++ (.('urlParam')?.a:{})
                        orderby sysl.source(.@item('type'))
                        >>  let tags = paramTags(.@item('name').s)?:{};
                            $`${go.name(.@item('name').s)} ${go.type(module, app, .@item('type'))} ${tags}`
                    ::\i}
                }
            `
        ::\i}
        ${entities >> \(:typename, ...) $`
            // *${typename} validator
            func (s *${typename}) Validate() error {
                return validator.Validate(s)
            }
        `::\i}
        ${
            let json_mapped_entities =
                entities
                >> (. +> (
                        param: //str.lower(.typename),
                        json_map_key: .@value('attrs')?('json_map_key')?('s').s:"",
                    ))
                where .@item.json_map_key;
            $`
                ${json_mapped_entities >> $`
                    // *${.typename} add
                    func (s *${.typename}Set) Add(${.param} ${.typename}) {
                        s.M[${.param}.${.json_map_key}] = ${.param}
                    }
                `::\i}
                ${json_mapped_entities >> $`
                    // *${.typename} lookup
                    func (s *${.typename}Set) Lookup(${.json_map_key} string) ${.typename} {
                        return s.M[${.json_map_key}]
                    }
                `::\i}
            `
        }
        ${aliases where .@item.@ != "Empty" && !//seq.has_prefix("EXTERNAL_", .@item.@) && !('unmapped_openapi' <: sysl.patterns(.@item.@value)) >> $`
            // ${.typename} ...
            type ${.typename} = ${go.type(module, app, .@value)}

            ${cond {(.@ <: allUnionTypes): $`
                func unmarshalJSONWithValidation${.typename}(data []byte) (*${.typename}, bool, error) {
                    return unmarshalJSONWithValidation${go.name(go.aliasOrType(app, .@))}(data)
                }
            `}}
        `::\i}
        ${aliases where .@item.@ = "Empty" >> $`
            // ${.typename} ...
            type ${.typename} struct {
            }
        `::\i}
        ${unions >> \(@: key, @value: value, :typename)
            let unionTypesWithId = (value('oneOf')('type').a >>  go.asExternalised(module, app, .)) >>
                (id: ., typename: go.name(.))
            ;
            let unionTypes = unionTypesWithId >> .typename;
            $`
            // ${typename} can be one of the following types at runtime:
            ${unionTypes >> $`// ${.}`::\i}
            type ${typename} struct {
                ${unionTypes >> $`
                    *${.} ``url:",omitempty"``
                    `::\i}
            }

            ${cond {typename <: go.errorReturnTypes(app): $`
                // Error fulfills the error interface.
                func (s ${typename}) Error() string {
                    type plain ${typename}
                    return fmt.Sprintf("%+v", plain(s))
                }
            `}}

            // *${typename} validator
            func (s *${typename}) Validate() error {
                return validator.Validate(s)
            }

            // Marshal data from the first non-nil pointer in the struct to JSON
            func (dst ${typename}) MarshalJSON() ([]byte, error) {
                ${unionTypes >> $`
                    if dst.${.} != nil {
                        return json.Marshal(dst.${.})
                    }
                `::\i}

                return []byte("{}"), nil // no data in oneOf schema
            }

            // Unmarshal JSON data into one of the pointers in the struct
            func (dst *${typename}) UnmarshalJSON(data []byte) error {
                match := 0
                matchEmpty := 0

                dstEmpty := ${typename}{}

                ${unionTypesWithId >> $`
                    // try to unmarshal data into ${.typename}
                    dst${.typename}, filled, err := unmarshalJSONWithValidation${go.name(go.aliasOrType(app, .id))}(data)
                    if err == nil {
                        if filled {
                            match++
                            dst.${.typename} = dst${.typename}
                        } else {
                            matchEmpty++
                            dstEmpty.${.typename} = dst${.typename}
                        }
                    }

                `::\i}

                if match > 1 {
                    // reset to nil
                    ${unionTypes >> $`
                        dst.${.} = nil
                    `::\i}

                    return fmt.Errorf("Data matches more than one schema in oneOf(${typename})")
                } else if match == 1 {
                    return nil
                } else if matchEmpty == 1 {
                    *dst = dstEmpty

                    return nil
                } else {
                    return fmt.Errorf("Data failed to match schemas in oneOf(${typename})")
                }
            }
        `::\i}
    `
