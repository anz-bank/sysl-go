let sysl = //{./sysl};

let name =
    let wordRE = //re.compile(`[\p{L}_][\p{L}\p{N}_]*`);
    # types starting with _ aren't exported so remove the underscores
    # types can't start with an integer, if it does add an N to the start
    let trimRE = \word
        //re.compile(`^_+`).sub("", word) -> //re.compile(`^(\d)`).sub("N$1", .);
    let initialisms = {
        # https://github.com/golang/lint/blob/8f45f776aaf18cebc8d65861cc70c33c60471952/lint.go#L771
        "ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML",
        "HTTP", "HTTPS", "ID", "IP", "JSON", "LHS", "QPS", "RAM", "RHS", "RPC",
        "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "UID",
        "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS",
    };
    let restricted = {
        "Error",
    };
    let uppers = \word
        (wordRE.match(word) >> .(0)) -> \[first, ...rest] [trimRE(first)] ++ rest >> \v
            let upper = //str.upper(trimRE(v));
            cond {upper <: initialisms: upper, _: //str.title(v)};
    \word
        let result = cond word {"": "", _: //seq.concat(uppers(word))};
        cond {result <: restricted: result++"_", _: result};

let asVariableName =
    let restricted = {
        "type",
    };
    \x
        let result = //re.compile(`[^[:word:]]`).sub('_', //str.lower(x));
        cond {result <: restricted: result++"_", _: result};

# Return a string containing the go module's main module's path. Takes
# one argument - a string specifying the location of the go.mod file to read.
# Ref: https://golang.org/ref/mod#go-mod-file-module
let goMainModulePath = \goModFilename //re.compile(`(?m)^module\s+(.*)$`).match($"${//os.file(goModFilename)}")(0)(1) rank (:.@);

# Return the name of the type prefixed with EXTERNAL_ if a type is completely missing, or is annotated as 'unmapped_openapi'
# When Sysl encounters a type that was referenced in the openapi spec but not defined it will create an alias of that type to string.
# In Sysl-go we do not want assume the type is string and instead just don't define it at all and allow the developer to create the type themselves.
# By prefixing those types with EXTERNAL_ it makes it clear that this type needs to be implemented by the developer (it also has the benefit of
# being backwards compatible as Sysl previously generated the name with EXTERNAL_)
let asExternalised = \mod \app \type
    let inMod = \app \t mod('apps', //seq.join(' :: ', app), 'types', t)?:false;
    let typeRef = type('typeRef', 'ref')?:{};
    (!typeRef && //error($`asExternalised is only for type references: ${type}`)) ||
    let {'path': (a: [(s: path)]), ...} = typeRef;
    cond typeRef {
        {'appname': {'part': (a: appname), ...}, ...}: inMod(appname >> .s, path) && path,
    } ||
    cond {
        app('types', path)?:false && ('unmapped_openapi' !<: sysl.patterns(type)): path
    } ||
    # cond {path = 'PingMultiRes': //error(''), _: 1} &&
    $`EXTERNAL_${path}`
;

# `package` returns the name of the package where an application is found.
# For example: demo
#
# This method exhibits the following behaviour:
# 1. Use the `go_package` annotation (if present).
# 2. Use the `package` annotation (if present).
# 3. Otherwise, derived the package location from the application name.
#
# Historically, the `go_package` annotation contained the singular name of the desired package:
# Foo :: Bar [@package="demo"]
# However, Protobuf specifications also use the `go_package` annotation to describe the desired
# package for code generation. Protobuf specifications support two `go_package` formats:
# 1. github.com/foo/demo
# 2. github.com/foo/demo/beta;demo
# Both examples resolve to the `demo` package. The first example uses an implicit package name taken
# as the final value in the package whereas the second example uses an explicit package name.
# https://developers.google.com/protocol-buffers/docs/reference/go-generated#package
let package = \app
    cond app {
        {'attrs': {'go_package': {'s': (s: s), ...}, ...}, ...}:
            let parts = //seq.split(';', s);
            cond parts {
                [_, p]: p,
                [p]: let parts = //seq.split('/', p); parts(parts count - 1),
            },
        {'attrs': {'package': {'s': (s: s), ...}, ...}, ...}: //str.lower(s),
        {'name': {'part': (:a)}, ...}: //str.lower($`${a >> .s::}`),
    };

# Compute the Go type for a Sysl type. If leafOnly, then only refer to the actual type without
# package signature. leafOnly is meant to be used when it is know that the type is within the same
# package of where it's used.
let typeImpl = \leafOnly \mod //fn.fix(\typeImpl \app \t
    let ptr = cond {t('opt')?:false && !({"sequence", "set"} & (t => .@)): "*"};
    let appname = cond {!leafOnly: cond t {
        {'typeRef': {'ref': {'appname': {'part': (a: appname)}, ...}, ...}, ...}: appname >> .s,
        {'typeRef': _}: app('name')('part').a >> .s,
        _: "",
    }};
    let typeName = cond t {
        {'attrs': {'sensitive': {'s': (s: "true"), ...}, ...}, ...}: `config.SensitiveString`,
        {'primitive': p, ...}: cond p {
            (s: 'DECIMAL' ): `float64`,
            (s: 'INT'     ): `int64`,
            (s: 'FLOAT'   ): `float64`,
            (s: 'STRING'  ): `string`,
            (s: 'STRING_8'): `string`,
            (s: 'BOOL'    ): `bool`,
            (s: 'BYTES'   ): `[]byte`,
            (s: 'DATE'    ): `date.Date`,
            (s: 'DATETIME'): cond t {
                {'attrs': {'time_format': {'s': (s: "stdtime"), ...}, ...}, ...}: `time.Time`,
                _: `convert.JSONTime`,
            },
        },
        {'sequence': sequence, ...}: $`[]${typeImpl(app, sequence)}`,
        {'set': set, ...}: $`${typeImpl(app, set)}Set`,
        {'typeRef': {'ref': {'path': (a: [(s: path)]), ...}, ...}, ...}:
            let pkg = appname && package(mod('apps')(//seq.join(' :: ', appname)));
            //seq.join(".", [pkg, name(asExternalised(mod, app, t))] where .@item),
        _: name(//seq.join(' :: ', appname)),
    };
    ptr ++ typeName
);

let type = typeImpl(false);
let leafType = typeImpl(true);
let leafOrFullType = \mod \app \t
    let appname = app('name');
    let typeAppName = cond t {
        {'typeRef': {'ref': {'appname': appname, ...}, ...}, ...}: appname,
        _: appname,
    };
    typeImpl(appname = typeAppName, mod, app, t)
;

# Return the base type if its an alias otherwise return the same type back
let aliasOrType = \app \t
    cond app('types')?(t)?:{} {
        # Grab the type name
        {'typeRef': {'ref': {'path': (a: [(s: typeName)]), ...}, ...}, ...}:
            # Check if its an alias and return the base type if it is
            let actualType = app('types')?(typeName)?:{};
            cond {
                actualType: typeName,
                _: t,
            },
        _: t,
    };

let followAliasType = \app \t
    cond t {
        {'typeRef': {'ref': {'path': (a: [(s: _)]), 'appname': appname, ...}, ...}, ...}: appname && t,
        # Grab the type name
        {'typeRef': {'ref': {'path': (a: [(s: typeName)]), ...}, ...}, ...}:
            # Check if its an alias and return the base type if it is
            let actualType = app('types')?(typeName)?:{};
            cond {
                # if it has typeref then its an alias and return it
                actualType('typeRef')?:false: actualType,
            },
    } || t;

let bodyType = \mod \app \t type(mod, app, followAliasType(app, t));

let varName = //re.compile(`_`).sub("");



# `pbPackage` returns the package where a protoc-generated application is found.
# For example: github.com/foo/demo
#
# This method exhibits the following behaviour:
# 1. Use the `go_pb_package` annotation (if present).
# 2. Use the `go_package` annotation (if present).
# 3. Otherwise, default to an invalid value.
#
# Historically, the `go_pb_package` annotation contained the package:
# Foo :: Bar [@go_pb_package="github.com/foo/demo"]
# However, Protobuf specifications natively use the `go_package` annotation to describe the desired
# package for code generation. Protobuf specifications support two `go_package` formats:
# 1. github.com/foo/demo
# 2. github.com/foo/demo;demo
# Both examples resolve to the `github.com/foo/demo` package. The first example only contains the
# package whereas the second example contains the package and an explicit package name.
# https://developers.google.com/protocol-buffers/docs/reference/go-generated#package
let pbPackage = \app
    cond app {
        {'attrs': {'go_pb_package': {'s': (:s), ...}, ...}, ...}: s,
        {'attrs': {'go_package': {'s': (:s), ...}, ...}, ...}: //seq.split(';', s)(0),
        _: '??basepath??/???',  # TODO: what's the right package name?
    };

# `pbImport` returns a suitable tuple for use within `prelude` to describe the given
# protoc-generated application.
# For example: (alias: 'pb', package: 'github.com/foo/bar')
let pbImport = \app
    (alias: 'pb', package: pbPackage(app));

let pbMethodInfo = \mod \app \ep
    let {'name': (s: methodName), 'param': (a: [param, ...]), 'stmt': (a: stmts), ...} = ep;
    let {'name': (s: pname), 'type': ptype, ...} = param;
    let methodName = name(methodName);
    let last = \xs xs(xs count - 1);
    # FIXME: add type call here
    let responseType = $`${stmts filter .@item {{'ret': _, ...}: .}
        >> last(//seq.split(".", last(//seq.split(" ", .("ret")("payload").s))))
    ::}`;
    let requestType = leafType(mod, app, ptype) || type(mod, app, ptype); # FIXME unsure if this is correct, this failed until the fallback using type(app, ptype) was added.
    (
        name: methodName,
        :pname,
        :requestType,
        :responseType,
        sig: \package \opts
            let opts = cond {opts: `opts ...grpc.CallOption,`};
            $`
                (
                    ctx context.Context,
                    ${pname} *${package}.${requestType},
                    ${opts}
                ) (*${package}.${responseType}, error)
            `,
    );

# Creates signature information from an endpoint
# mod is the sysl module
# app is the main application that is being generated
# epApp is the application that owns ep
# ep is the endpoint
let temporalMethodInfo = \mod \app \epApp \ep
    let param = ep('param')?.a:[];
    let methodName = ep('name').s;
    let epAppName = epApp('name');

    # leaf is always relative to main app
    let requestType = param >> \{'name': (s: pname), 'type': ptype, ...}
        let ptype = cond ptype {
            {'typeRef': {'ref': {'path': _}, ...}, ...}: ptype +> {
                'typeRef' +>: {'ref' +>: {'appname': epAppName}}
            },
            _: ptype,
        };
        (
            name: pname,
            leaf: leafOrFullType(mod, app, ptype),
            type: type(mod, app, ptype),
        )
    ;
    let responseType =
        let returns = sysl.endpoint.normalReturns(app, ep);
        cond returns count {
            0: (leaf: '', type: ''),
            1:
                let returnTypeStr = //seq.join('.', (returns single).@item.type);
                let guessedType = sysl.type.guessType(epApp, returnTypeStr);
                (
                    leaf: leafOrFullType(mod, app, guessedType),
                    type: type(mod, app, guessedType),
                ),
            _: //error($`multiple returns for temporal client is not allowed: ${methodName}`),
        }
    ;
    (
        name: name(methodName),
        :requestType,
        :responseType,
        sig: \alwaysWithPkg $`
            (
                ctx context.Context,
                ${requestType >> \(:name, :type, :leaf, ...) $`${name} ${(alwaysWithPkg && type) || leaf}`::,\n:,}
                option ...client.StartWorkflowOptions,
            ) (*core.Run[${(alwaysWithPkg && responseType.type) || responseType.leaf || `any`}], error)
        `,
        activitySig: \alwaysWithPkg $`
            (
                ctx workflow.Context,
                ${requestType >> \(:name, :type, :leaf, ...) $`${name} ${(alwaysWithPkg && type) || leaf}`::,\n:,}
            ) *core.Future[${(alwaysWithPkg && responseType.type) || responseType.leaf || `any`}]
        `,
    )
;

let prelude = \app \imports $`
    // Code generated by sysl DO NOT EDIT.
    package ${package(app)}

    import (
        "context"
        "database/sql"
        "encoding/json"
        "errors"
        "flag"
        "fmt"
        "io"
        "log"
        "net"
        "net/http"
        "net/url"
        "testing"
        "time"

        "github.com/anz-bank/sysl-go/common"
        "github.com/anz-bank/sysl-go/core"
        "github.com/anz-bank/sysl-go/config"
        "github.com/anz-bank/sysl-go/convert"
        "github.com/anz-bank/sysl-go/database"
        "github.com/anz-bank/sysl-go/handlerinitialiser"
        "github.com/anz-bank/sysl-go/restlib"
        "github.com/anz-bank/sysl-go/syslgo"
        "github.com/anz-bank/sysl-go/testutil/e2e"
        "github.com/anz-bank/sysl-go/testutil/temporal_tester"
        "github.com/anz-bank/sysl-go/validator"
        "github.com/anz-bank/sysl-go/core/authrules"
        golog "github.com/anz-bank/sysl-go/log"
        "github.com/stretchr/testify/assert"
        "github.com/stretchr/testify/require"

        ${
            imports => cond . {
                (:alias, package: pkg): $`${alias} ${pkg:q}`,
                _: $`${.:q}`,
            } orderby .
        ::\i:\n}
        "github.com/go-chi/chi/v5"
        "github.com/rickb777/date"
        "google.golang.org/grpc"
        "google.golang.org/grpc/test/bufconn"
        "google.golang.org/grpc/codes"
        "google.golang.org/grpc/status"
        "google.golang.org/protobuf/proto"
        "gopkg.in/yaml.v2"
        "go.temporal.io/sdk/client"
        "go.temporal.io/sdk/worker"
        "go.temporal.io/sdk/workflow"
        "go.temporal.io/sdk/activity"
        "go.temporal.io/sdk/testsuite"
    )`;

let methodName =
    # TODO: Remove these warts.
    let hasArg = //re.compile(`\{(\p{L}+)\}$`).match;
    let hasList = //re.compile(`[\p{L}\p{N}]$`).match; # TODO: Should be \[...\]
    \app \ep
        cond ep {
            {'restParams': {'method': (s: method), 'path': (s: path), ...r}, ...m}:
                let vars_in_url_name = ("vars_in_url_name" <: sysl.patterns(app)) || ("vars_in_url_name" <: sysl.patterns(ep));
                let withArg = cond {hasArg(path) && //str.upper(method) = "POST": "WithArg"};
                let getList = cond {hasList(path) && //str.upper(method) = "GET": "List"};
                let methodPostfix = //seq.split("/")(//seq.trim_prefix("/", path)) >>
                    let postfix = cond hasArg(.) {
                        [[_, arg]]: cond {vars_in_url_name: arg},
                        _: .,
                    };
                    //str.title(//str.lower(postfix));
                name(//str.title(//str.lower(method)) ++ $"${methodPostfix::}") ++ withArg ++ getList,
            {'name': (:s), ...}:
                name(s),
        };

let errorReturnTypes = \app
    //rel.union(app('endpoints')?:{} => (sysl.endpoint.returns(app, .@value) => .@item))
        where .var = "error" && .type != [""] => //seq.join(".")(.type) => name(.);

let typeWithPackage = \mod \app \return \package
        # FIXME: this processing shouldn't be necessary
        # it is currently done out of convenience.
        # maybe sysl.endpoint.returns should always return guessed type?
        cond return {
            (type: [""], ...): "",
            _:
                let syslType = sysl.type.guessType(app, sysl.endpoint.returnPayload(return));

                # FIXME: this is a shortcut. sysl.type.guessType isn't called correctly here as sometimes
                # the type do not belong in the app. If package exists, it assumes that the callers knows
                # what the correct package is and it will remove the EXTERNAL_ prefix. If there is no
                # package, it is assumed that it is a missing type.
                let fixExternal = \t
                    cond {
                        //seq.has_prefix('EXTERNAL_', t) && package: //str.title(//seq.trim_prefix('EXTERNAL_', t)),
                        _: t
                    }
                ;
                cond syslType {
                    {'sequence': {'typeRef': _, ...}, ...}:
                        $`[]${package && package ++ '.'}${fixExternal(leafType(mod, app, syslType('sequence')))}`,
                    {'typeRef': _, ...}:
                        $`*${package && package ++ '.'}${fixExternal(leafType(mod, app, syslType))}`,
                    _: leafType(mod, app, syslType),
                }
        }
;

# `baseType` returns the base for aliased types otherwise returns {}.
# need allTypes here because svc_mocks passes in a the names already converted to go names
let baseType = \mod \app \t \allTypes
    let aliases = allTypes where ({'typeRef', 'primitive', 'sequence'} & (.@value => .@));
    let nonEmpty = aliases where .@ != "Empty" && !//seq.has_prefix("EXTERNAL_", .@);
    type(mod, app, nonEmpty(t)?:{});

let module = \module
    let typeWithClientPackage = \app \t
        let package = (t.type count = 2) && sysl.splitAppName(t.type(0));
        let appname = app('name')('part').a >> .s;
        typeWithPackage(module, app, t, (package != appname) && //str.lower(//seq.join('', package)))
    ;
    let targetApp = \target
        ((module('apps') where .@value('name') = target) single).@value;

    let methodReturnTypes = \app \ep
        let tn = sysl.endpoint.returns(app, ep) => .@item where .var != "error" => \t
            # TODO: Remove double entry once cond array handling is fixed.
            cond t.type {
                ([""], [""]): "*http.Header",
                _: $"${typeWithClientPackage(app, t)}",
            };
        (tn orderby .) ++ ["error"];

    let methodSignature = \app \ep
        $`${methodName(app, ep)}(ctx context.Context, req *${methodName(app, ep)}Request) (${methodReturnTypes(app, ep) ::, })`;

    let callSignature = \app \{'target': target, 'endpoint': ep, ...}
        let dep = targetApp(target);
        let package = package(dep);
        let ep = sysl.app.endpoint(dep, ep.s);
        let method = methodName(dep, ep);
        let patterns = sysl.patterns(dep);
        cond {
            'temporal' <: patterns:
                temporalMethodInfo(module, app, dep, ep) -> $`${name(package)}${.name} func${.sig(true)}`,
            'gRPC' <: patterns:
                pbMethodInfo(module, dep, ep) -> $`${name(package)}${.name} func${.sig(package, true)}`,
            _:
                $`
                    ${name(package)}${method} func(
                        ctx context.Context,
                        req *${package}.${method}Request,
                    ) (${
                        let typed = sysl.endpoint.normalReturns(dep, ep)
                            >> $"${typeWithPackage(module, app, ., package)}";
                        let untyped = sysl.endpoint.untypedReturns(dep, ep) >> `*http.Header`;
                        typed ++ untyped ++ ["error"]
                    ::, })
                `,
        };

    let clientDeps = \app
        sysl.app.dependencies(app) =>
            let dep = targetApp(.);
            (
                target: .,
                import: package(dep),
                app: (name: dep('name')),
                isService: dep('endpoints')?:false,
            )
    ;

    let depField = \(:import, :target, ...)
        let patterns = sysl.patterns(targetApp(target));
        (
            grpc: 'gRPC' <: patterns,
            name: $`${import}Service`,
            type: $`${import}.Service`,

            temporal: 'temporal' <: patterns,
        );

    (
        :callSignature,
        :clientDeps,
        :depField,
        :methodReturnTypes,
        :methodSignature,
        :targetApp,
        :typeWithClientPackage,
    );

(
    :goMainModulePath,
    :methodName,
    :module,
    :name,
    :package,
    :pbPackage,
    :pbImport,
    :pbMethodInfo,
    :temporalMethodInfo,
    :prelude,
    :type,
    :leafType,
    :leafOrFullType,
    :baseType,
    :bodyType,
    :aliasOrType,
    :varName,
    :errorReturnTypes,
    :asVariableName,
    :asExternalised,
)
