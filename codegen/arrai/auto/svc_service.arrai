let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname, :endpoints, :clientDeps, :module, :basepath, ...)
    let (:methodSignature, :typeWithClientPackage, :methodReturnTypes, ...) = go.module(module);

    let HttpMethodStatements = \methodName \ep
        let patterns = sysl.patterns(ep);
        let returns = sysl.endpoint.returns(app, ep);

        let nils = methodReturnTypes(app, ep) where .@item != "error" orderby .@ >>
            cond { .@item = "string": '""', _ : "nil" };

        let returnDownstreamError = \type \var \err
            $`return ${nils ++ [
                $`common.CreateDownstreamError(ctx, common.Downstream${type}Error, ${var}.HTTPResponse, ${var}.Body, ${err})`
            ]::, }`;

        $`
            required := []string{${
                (ep("param")?.a:{} where {"header"} (<=) sysl.patterns(.@item('type')) && sysl.type.required(.@item('type'))) rank (:.@) >>
                    $`"${.('type')?('attrs')?('name')?('s').s:(.('name').s)}"`
            ::, }}
            ${
                let pathvars = ep('restParams')('urlParam')?.a:{};
                let terms = pathvars => $`{${.@item('name').s}}`;
                let formatArgs = $`"%s${//seq.split("/")(ep('restParams')('path').s) >> cond {. <: terms: "%v", _: .}::/}"`; #`
                let params = pathvars >> $`req.${go.name(.('name').s)}`;
                $`u, err := url.Parse(fmt.Sprintf(${formatArgs}, ${["s.URL"] ++ params::, }))`
            }
            if err != nil {
                return ${nils ++ [`common.CreateError(ctx, common.InternalError, "failed to parse url", err)`]::, }
            }

            ${let queryParams = ep('restParams')('queryParam')?.a:{}; cond {queryParams: $`
                q := u.Query()
                ${
                    let reqQueryParams = queryParams where !.@item('type')('opt')?.b:false;
                    let optQueryParams = queryParams where .@item('type')('opt')?.b:false;
                    let queryParamName = \qparam cond {
                        'queryParamNames' <: qparam('attrs')?:{}:
                            $"${//seq.concat(qparam('attrs')?('queryParamNames'):{} where (qparam.name <: .) >> (. &~ {qparam.name}))::}",
                        _: qparam('name').s,
                    };
                    let var = \. $`req.${go.name(.('name').s)}`;
                    $`
                        ${reqQueryParams => .@item orderby sysl.source(.('type')) >> $`
                            q = convert.EncodeQueryParam(q, "${queryParamName(.)}", ${var(.)})
                        `::\i}
                        ${optQueryParams => .@item orderby sysl.source(.('type')) >> $`
                            if ${var(.)} != nil {
                                q = convert.EncodeQueryParam(q, "${queryParamName(.)}", *${var(.)})
                            }
                        `::\i}
                    `
                }
                u.RawQuery = q.Encode()
            `}}
            ${
                let body = (ep('param')?.a:{} where "body" <: sysl.patterns(.@item('type'))) >> "req.Request";
                let retvars = returns where .@item.type != [""] => .@item.var;
                let method = ep('restParams')('method').s;
                $`
                    result, err := restlib.DoHTTPRequest(ctx, &restlib.HTTPRequest{
                        Client:        s.Client,
                        Method:        "${method}",
                        URLString:     u.String(),
                        Body:          ${body || ["nil"]::},
                        Required:      required,
                        Responses:     responses${methodName},
                        ExtraHeaders:  s.Headers,
                    })
                `
            }
            restlib.OnRestResultHTTPResult(ctx, result, err)
            if err != nil {
                ${
                    let downstreamUnavailable = $`
                        return ${nils ++ [$`
                            common.CreateError(ctx, common.DownstreamUnavailableError, "call failed: ${appname} <- ${ep('restParams')('method').s} " + u.String(), err)`
                        ]::, }`;
                    cond {
                        "error" <: (returns where .@item.type != [""] => .@item.var): $`
                            response, ok := err.(*restlib.HTTPResult)
                            if !ok {
                                ${downstreamUnavailable}
                            }
                            ${returnDownstreamError("Response", "response", "response.Response.(error)")}
                        `,
                        _: downstreamUnavailable
                    }
                }
            }

            if result.HTTPResponse.StatusCode == http.StatusUnauthorized {
                ${returnDownstreamError("Unauthorized", "result", "nil")}
            }
            ${
                let makeType = \input
                    cond {
                        input = "error": input,
                        _: go.name(input),
                    };

                (returns where (.@item -> .var != "error" && .type != [""]) rank(@: typeWithClientPackage(app, .@item))) >>> \i \.
                    let responseVar = $`${makeType(.var)}${go.name(//seq.concat(.type))}Response`;
                    let responseType = typeWithClientPackage(app, .);

                    # declareResp currently strips '*' from type and passes &type to 'OKResponse',
                    # therefore if there was no '*' to begin with we need to add it here
                    let addStar = cond {!(responseType & '*'): '*' };
                    let ptrResponseType = addStar ++ responseType;
                    let ptrResponseVar = addStar ++ responseVar;

                    # The block below also avoids validating raw string and byte responses. The
                    # Validator#validate method is designed to validate structs, and while this method does
                    # include logic to regard all strings as valid it is not primarily intended for such
                    # usage, therefore non-struct responses (i.e. string and byte) responses are not validated.
                    $`
                        ${responseVar}, ok := result.Response.(${ptrResponseType})
                        if ok {
                            ${cond { responseType !<: {'string', '[]byte'}: $`
                                valErr := validator.Validate(${responseVar})
                                if valErr != nil {
                                    ${returnDownstreamError(`UnexpectedResponse`, `result`, `valErr`)}
                                }
                            `}}

                            return ${
                                # return response in correct location for function signature (nil otherwise)
                                sysl.replaceArrayElement(nils, i, ptrResponseVar) ::, :}, nil
                        }
                    `
            ::\i}
            ${cond {
                returns where .@item.type = [""] && .@item.var = "ok": $`return ${sysl.replaceArrayElement(nils, nils count - 1, "&result.HTTPResponse.Header") ::, }, nil`,
                returns where .@item.type != [""] && .@item.var = "ok": returnDownstreamError("UnexpectedResponse", "result", "nil"),
                _: "return nil",
            }}
        `;

    $`
        ${go.prelude(app, clientDeps => $`${basepath}/${.import}`)}
        ${"app.union" where false >> let f = $`Is${.key}`; $`
            // ${f} ...
            type ${go.name(.key)} interface {
                ${f}()
            }

            ${.value.fields >> $`func (*${.}) ${f} {}`}
        `:::\n}

        // Service interface for ${appname}
        type Service interface {
            ${endpoints >> methodSignature(app, .@value)::\i}
        }

        // Client for ${appname} API
        type Client struct {
            Client  *http.Client
            URL     string
            Headers map[string][]string
        }

        // NewClient for ${appname}
        func NewClient(client *http.Client, serviceURL string) *Client {
            return &Client{client, serviceURL, nil}
        }

        ${endpoints where cond .@item.@value {{'restParams': _, ...}: true} >> \(@value: ep, ...)
            let methodName = go.methodName(app, ep);

            let responses =
                let returns = (sysl.endpoint.returns(app, ep) where typeWithClientPackage(app, .@item));
                let responses = returns =>
                    let (:@, @item: (:codeAndMediaType, :var, :type, :seq, ...)) = .;
                    let codes = ((codeAndMediaType => .code) where .) || (var = 'error' && {'400'}) || {'200'};
                    (:codes, type: //seq.trim_prefix('*', typeWithClientPackage(app, .@item)), ord: @, :var)
                ;
                let responses = responses nest |type, ord, var|types;
                responses =>
                    let t = cond (.types count) {
                        0: (type: '', var: ''),
                        1: let t = .types single; (:t.type, :t.var),
                        _: let t = (.types orderby .ord)(0); (:t.type, :t.var),
                    };
                    t +> (codes: .codes => //eval.value(.))
            ;

            let returnType = \type $`
                var resp ${type}
                return &resp
            `;

            let defaultResponse = \var
                let default = ((responses <&- {(:var)}) orderby (.codes min .) )(0)?:(type: '');
                (
                    default.type && $`
                        // default to ${var:q} response of status code ${default.codes orderby .::, :}
                        ${returnType(default.type)}
                    `
                ) || `return nil`
            ;

            $`
                // ${methodName} ...
                func (s *Client) ${methodSignature(app, ep)} {
                    ${HttpMethodStatements(methodName, ep)}
                }

                func responses${methodName}(statusCode int) any {
                    ${ responses && $`switch statusCode {
                    ${
                        responses orderby .codes >> $`
                            case ${.codes orderby .::, :}:
                                ${returnType(.type)}
                        `
                    ::\i}
                    }

                    `}
                    // default behavior when status code is not mapped
                    if statusCode >= 200 && statusCode < 300 {
                        ${defaultResponse('ok')}
                    }
                    ${defaultResponse('error')}
                }
            `
        ::\i}
    `
