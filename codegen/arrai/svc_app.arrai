let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname, :basepath, :clientDeps, :clientDeps, :module, :goModule, :restEndpoints, ...)
    let prefix = \dep cond {goModule.depField(dep).grpc: `GRPC`, _: `HTTP`};
    $`
        ${go.prelude(app, clientDeps => $`${basepath}/${.import}`)}

        // DownstreamClients for ${appname}
        type DownstreamClients struct {
            ${clientDeps orderby . >> cond {
                goModule.depField(.).grpc:
                    $`${.import}Client ${.import}.${.target('part').a >> .s::}Client`,
                _:
                    $`${.import}Client *${.import}.Client`,
            }::\i}
        }

        ${cond {
            "gRPC" <: sysl.patterns(app): $`
                // BuildGrpcHandlerInitialiser ...
                func BuildGrpcHandlerInitialiser(serviceInterface GrpcServiceInterface, callback core.GrpcGenCallback, downstream *DownstreamClients) handlerinitialiser.GrpcHandlerInitialiser {
                    serviceHandler := NewGrpcServiceHandler(callback, &serviceInterface${
                        clientDeps orderby . >> $`, downstream.${.import}Client`
                    ::})
                    return serviceHandler
                }
            `,
            _: $`
                // BuildRestHandlerInitialiser ...
                func BuildRestHandlerInitialiser(serviceInterface ServiceInterface, callback core.RestGenCallback, downstream *DownstreamClients) handlerinitialiser.HandlerInitialiser {
                    serviceHandler := NewServiceHandler(callback, &serviceInterface${
                        clientDeps orderby . >> $`, downstream.${.import}Client`
                    ::})
                    serviceRouter := NewServiceRouter(callback, serviceHandler)
                    return serviceRouter
                }
            `
        }}

        // BuildDownstreamClients ...
        func BuildDownstreamClients(cfg *config.DefaultConfig) (*DownstreamClients, error) {
            var err error = nil
            ${clientDeps orderby . >>
                $`${.import}${prefix(.)}Client, ${.import}Err := core.BuildDownstream${prefix(.)}Client("${.import}", &cfg.GenCode.Downstream.(*DownstreamConfig).${go.name(.import)})`
            ::\i}
            ${clientDeps orderby . >> $`
                if ${.import}Err != nil {
                    return nil, ${.import}Err
                }
            `::\i}
            ${clientDeps orderby . >> cond {
                goModule.depField(.).grpc:
                    $`${.import}Client := ${.import}.New${.target('part').a >> .s::}Client(${.import}${prefix(.)}Client)`,
                _:
                    $`${.import}Client := ${.import}.NewClient(${.import}${prefix(.)}Client, cfg.GenCode.Downstream.(*DownstreamConfig).${go.name(.import)}.ServiceURL)`,
            }::\i}

            return &DownstreamClients{${clientDeps orderby . >> $`${.import}Client: ${.import}Client,`::\i}
            }, err
        }

        // NewDefaultConfig ...
        func NewDefaultConfig() config.DefaultConfig {
            return config.DefaultConfig{
                Library: config.LibraryConfig{},
                GenCode: config.GenCodeConfig{Downstream: &DownstreamConfig{}},
            }
        }
    `
