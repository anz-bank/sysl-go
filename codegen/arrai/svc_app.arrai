let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname, :basepath, :clientImports, :module, :restEndpoints, ...) $`
    ${go.prelude(app, clientImports => $`${basepath}/${.}`)}

    // DownstreamClients for ${appname}
    type DownstreamClients struct {
        ${clientImports orderby . >> $`${.}Client *${.}.Client`::\i}
    }

    ${cond {
        "gRPC" <: sysl.patterns(app): $`
            // BuildGrpcHandlerInitialiser ...
            func BuildGrpcHandlerInitialiser(serviceInterface GrpcServiceInterface, callback core.GrpcGenCallback, downstream *DownstreamClients) handlerinitialiser.GrpcHandlerInitialiser {
                serviceHandler := NewGrpcServiceHandler(callback, &serviceInterface${
                    clientImports orderby . >> $`, downstream.${.}Client`
                ::})
                return serviceHandler
            }
        `,
        _: $`
            // BuildRestHandlerInitialiser ...
            func BuildRestHandlerInitialiser(serviceInterface ServiceInterface, callback core.RestGenCallback, downstream *DownstreamClients) handlerinitialiser.HandlerInitialiser {
                serviceHandler := NewServiceHandler(callback, &serviceInterface${
                    clientImports orderby . >> $`, downstream.${.}Client`
                ::})
                serviceRouter := NewServiceRouter(callback, serviceHandler)
                return serviceRouter
            }
        `
    }}

    // BuildDownstreamClients ...
    func BuildDownstreamClients(cfg *config.DefaultConfig) (*DownstreamClients, error) {
        var err error = nil
        ${clientImports orderby . >> $`
            ${.}HTTPClient, ${.}Err := core.BuildDownstreamHTTPClient("${.}", &cfg.GenCode.Downstream.(*DownstreamConfig).${go.name(.)})
        `::\i}
        ${clientImports orderby . >> $`
            if ${.}Err != nil {
                return nil, ${.}Err
            }
        `::\i}
        ${clientImports orderby . >> $`
            ${.}Client := ${.}.NewClient(${.}HTTPClient, cfg.GenCode.Downstream.(*DownstreamConfig).${go.name(.)}.ServiceURL)
        `::\i}

        return &DownstreamClients{${clientImports orderby . >> $`${.}Client: ${.}Client,`::\i}
        }, err
    }

    // NewDefaultConfig ...
    func NewDefaultConfig() config.DefaultConfig {
        return config.DefaultConfig{
            Library: config.LibraryConfig{},
            GenCode: config.GenCodeConfig{Downstream: &DownstreamConfig{}},
        }
    }
`
