let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname,, :clientImports, :endpoints, :goModule, :hasDB, :basepath, :module, :nonRestEndpoints, ...)
    let client = //{./client}((:appname, :clientImports, :hasDB, :module));
    let structName = $`Default${go.name(appname)}Impl`;
    $`
        ${go.prelude(app,
            (clientImports => $`${basepath}/${.}`)
            | {(alias: `pb`, package: $`${basepath}/${app('attrs')('go_pb_package')('s').s}`)},
        )}

        ${nonRestEndpoints >> \(@:_, @value: ep) client.client_struct(ep)::\i}

        // GrpcServiceInterface for ${appname}
        type GrpcServiceInterface struct {
            ${nonRestEndpoints >> \(@value: ep, ...)
                let name = go.methodName(ep);
                $`${name} func(ctx context.Context, req *pb.${name}Request, client ${name}Client) (*pb.${name}Response, error)`
            ::\i}
        }

        ${client.config}
    `
