let go = //{./go};
let grpc = //{./grpc};
let sysl = //{./sysl};

\(:app, :appname,, :clientDeps, :endpoints, :goModule, :hasDB, :basepath, :module, :nonRestEndpoints, ...)
    let client = //{./client}((:appname, :clientDeps, :hasDB, :module));

    let structName = $`Default${go.name(appname)}Impl`;
    $`
        ${go.prelude(app,
            (clientDeps => $`${basepath}/${.import}`)
            | {(alias: `pb`, package: $`${app('attrs')('go_pb_package')('s').s}`)},
        )}

        ${nonRestEndpoints >> \(@:_, @value: ep) client.client_struct(ep)::\i}

        // GrpcServiceInterface for ${appname}
        type GrpcServiceInterface struct {
            ${nonRestEndpoints >> \(@value: ep, ...)
                grpc.methodSig(ep) -> $`${.name} func${.paramsWithClient}`
            ::\i}
        }

        ${client.config}
    `
