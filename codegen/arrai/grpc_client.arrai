let go = //{./go};

\(:app, :appname, :basepath, :clientDeps, :endpoints, ...)
    let methodSig = \ep
        let {'name': (s: name), 'param': (a: [param]), 'stmt': (a: stmts), ...} = ep;
        let {'name': (s: pname), 'type': ptype, ...} = param;
        let rparam = $`${stmts
            filter .@item {{'ret': _, ...}: .}
            >> //seq.split(" ", .("ret")("payload").s)(2)
        ::}`;
        $`${name}(ctx context.Context, ${pname} *pb.${go.type(ptype)}) (*pb.${rparam}, error)`;

    # TODO: sysl automapping between sysl types and protobuf types
    # TODO: use protobuf from sysl to use instead of precompiled from the api repository
    $`
        ${go.prelude(app, (clientDeps => $`${basepath}/${.import}`) | go.pbPackage(basepath, app))}

        // Client implements a client for ${appname}.
        type Client struct {
            client pb.${appname}Client
            addr   string
        }

        // NewClient creates a new Client.
        func NewClient(addr string, connTimeout time.Duration) (*Client, error) {
            ctxWithTimeout, cancel := context.WithTimeout(context.Background(), connTimeout)
            defer cancel()

            conn, err := grpc.DialContext(ctxWithTimeout, addr, grpc.WithBlock())
            if err != nil {
                return nil, err
            }

            return &Client{pb.New${appname}Client(conn), addr}, nil
        }

        ${(endpoints => \(@:_, @item: (@:_, @value: ep))
            let {'name': (s: name), 'param': (a: [{'name': (s: pname), ...}]), ...} = ep;
            $`
                // ${name} ...
                func (s *Client) ${methodSig(ep)} {
                    return s.client.${name}(ctx, ${pname})
                }
            `
        ) orderby .:::}
    `
