let go = //{./go};
let sysl = //{./sysl};

\(:app, :appname, :basepath, :clientImports, :goModule, :hasDB, :module, :restEndpoints, ...) $`
    ${go.prelude(app, clientImports => $`${basepath}/${.}`)}

    ${
        (app('types') where "error" <: sysl.patterns(.@value) orderby .@) >>> \i \.
            let typename = go.name(.@);
            $`
                // *${typename} error
                var ${typename} common.CustomError = map[string]string{"name": "${typename}"${
                    .@value('tuple')('attrDefs') orderby .@ >> $`, "${.@}": "${.@value('attrs')('value')('s').s}"`
                ::}}
            `
    :::\n}
    // Handler interface for ${appname}
    type Handler interface {
        ${restEndpoints >> $`${go.methodName(.@value)}Handler(w http.ResponseWriter, r *http.Request)`::\i}
    }

    // ServiceHandler for ${appname} API
    type ServiceHandler struct {
        genCallback      core.RestGenCallback
        serviceInterface *ServiceInterface
        ${cond {hasDB: $`DB *sql.DB`}}
        ${clientImports orderby . >> $`${.}${go.name(.)}Service ${.}.Service`::\i}
    }

    // NewServiceHandler for ${appname}
    func NewServiceHandler(genCallback core.RestGenCallback, serviceInterface *ServiceInterface${
        clientImports orderby . >> $`, ${.}${go.name(.)}Service ${.}.Service`
    ::}) *ServiceHandler {
        ${cond {hasDB: $`
            db, err := database.GetDBHandle()
            if err != nil {
                    return nil
            }
        `}}
        return &ServiceHandler{genCallback, serviceInterface${
            clientImports orderby . >> $`, ${.}${go.name(.)}Service`
        ::}${cond {hasDB: $`, db`}}}
    }

    ${restEndpoints >> \(@value: ep, ...)
        let methodName = go.methodName(ep);
        let returns = sysl.endpoint.normalReturns(ep);
        let urlParams = ep('restParams')('urlParam')?.a:[];
        let queryParams = ep('restParams')('queryParam')?.a:[];
        let headerParams = [];
        let optQueryParams =
            queryParams where .@item('type')('opt')?.b:false
                orderby sysl.source(.@item('type'))
                >> \(@item: {'name': (s: name), 'type': type, ...}, ...)
                    (
                        :name,
                        :type,
                        var: $`${go.name(name)}Param`,
                    );
        $`
            // ${methodName}Handler ...
            func (s *ServiceHandler) ${methodName}Handler(w http.ResponseWriter, r *http.Request) {
                if s.serviceInterface.${methodName} == nil {
                    common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError)
                    return
                }

                ctx := common.RequestHeaderToContext(r.Context(), r.Header)
                ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), http.StatusOK)
                var req ${methodName}Request

                ${cond ep('restParams')('method').s {('POST', 'PUT'): $`
                    decoder := json.NewDecoder(r.Body)
                    decodeErr := decoder.Decode(&req.Request)
                    if decodeErr != nil {
                            common.HandleError(ctx, w, common.BadRequestError, "Error reading request body", decodeErr, s.genCallback.MapError)
                            return
                    }
                `}}

                ${urlParams where .@item('type')('primitive')?.s:"" = "INT" >> \{'name': (s: name), ...}
                    $`req.${go.name(name)} = restlib.GetURLParamForInt(r, "${name}")`
                ::\i:\n}
                ${urlParams where .@item('type')('primitive')?.s:"" != "INT" >> \{'name': (s: name), ...}
                    $`req.${go.name(name)} = restlib.GetURLParam(r, "${name}")`
                ::\i:\n}
                ${queryParams where !.@item('type')('opt')?.b:false >> \{'name': (s: name), ...}
                    $`req.${go.name(name)} = restlib.GetQueryParam(r, "${name}")`
                ::\i:\n}
                ${optQueryParams >> $`var ${.var} string`::\i\n:\n}
                ${cond {optQueryParams: 'var convErr error'}}
                ${optQueryParams >> $`${.var} = restlib.GetQueryParam(r, "${.name}")`::\i}
                ${optQueryParams >>
                    let type = cond go.type(.type) {
                        "*bool": "BoolPtr",
                        "*int64": "IntPtr",
                        "*convert.JSONTime": "TimePtr",
                        _: "StringPtr",
                    };
                    $`
                        req.${go.name(.name)}, convErr = convert.StringTo${type}(ctx, ${.var})
                        if convErr != nil {
                                common.HandleError(ctx, w, common.BadRequestError, "Invalid request", convErr, s.genCallback.MapError)
                                return
                        }
                    `
                ::\i}
                ${headerParams >> \{'name': (s: name), ...}
                    $`${go.name(name)} := restlib.GetHeaderParam(r, "${name}")`
                ::\i:\n}

                ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
                defer cancel()
                valErr := validator.Validate(&req)
                if valErr != nil {
                    common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError)
                    return
                }

                ${cond {hasDB: $`
                    conn, err := s.DB.Conn(ctx)
                    if err != nil {
                            common.HandleError(ctx, w, common.InternalError, "Database connection could not be retrieved", err, s.genCallback.MapError)
                            return
                    }

                    defer conn.Close()
                    retrievebycompanyandlocationStmt, err_retrievebycompanyandlocation := conn.PrepareContext(ctx, "select company.abnnumber, company.companyname, company.companycountry, department.deptid, department.deptname, department.deptloc from company JOIN department ON company.abnnumber=department.abn WHERE department.deptloc=? and company.companyname=? order by company.abnnumber;")
                    if err_retrievebycompanyandlocation != nil {
                            common.HandleError(ctx, w, common.InternalError, "could not parse the sql query with the name sql_retrieveByCompanyAndLocation", err_retrievebycompanyandlocation, s.genCallback.MapError)
                            return
                    }

                    tx, err := conn.BeginTx(ctx, &sql.TxOptions{Isolation: sql.LevelSerializable})
                    if err != nil {
                            common.HandleError(ctx, w, common.DownstreamUnavailableError, "DB Transaction could not be created", err, s.genCallback.MapError)
                            return
                    }
                `}}
                client := ${methodName}Client{
                    ${sysl.endpoint.calls(ep) >>
                        let dep = goModule.targetApp(.('target'));
                        let package = go.package(dep);
                        let ep = sysl.app.endpoint(dep, .('endpoint').s);
                        let method = go.methodName(ep);
                        $`${method}: s.${package}${go.name(package)}Service.${method},`
                    ::\i:\n}${
                        cond {hasDB: $`
                            conn: conn,
                            ${sysl.endpoint.sqlStatements(ep) => $`${.@}: ${.@}Stmt,` orderby .::\i}
                        `}
                    }
                }

                ${returns >> $`${//str.lower(.type(.type count - 1))}, `::}err := s.serviceInterface.${methodName}(ctx, &req, client)
                if err != nil {
                    ${cond {hasDB: $`tx.Rollback()`}}
                    common.HandleError(ctx, w, common.DownstreamUnexpectedResponseError, "Downstream failure", err, s.genCallback.MapError)
                    return
                }
 
                ${cond {hasDB: $`
                    commitErr := tx.Commit()
                    if commitErr != nil {
                            common.HandleError(ctx, w, common.InternalError, "Failed to commit the transaction", commitErr, s.genCallback.MapError)
                            return
                    }
                `}}

                headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
                restlib.SetHeaders(w, headermap)
                restlib.SendHTTPResponse(w, httpstatus${(returns >> $`, ${
                    let type = .type(.type count - 1);
                    let var = //str.lower(type);
                    cond app('types')?(type)?:() {
                        {'primitive': (s: 'BYTES'), ...}: $"(*[]byte)(${var})",
                        _: var,
                    }
                }`) || [', nil']:::})
            }
        `
    ::\i}
`
