#!/usr/bin/env arrai

let go   = //{./go};
let sysl = //{./sysl};

# codegen groups

let restClient = {"error_types", "service", "types"};
let restService = restClient | {"requestrouter", "servicehandler", "serviceinterface"};

let grpcService = {"grpc_handler", "grpc_interface"};

let codegenGroups = {
    "rest-service": restService,
    "rest-app":     restService | {"app"},
    "rest-client":  restClient,
    "grpc-service": grpcService,
    "grpc-app":     grpcService | {"app"},
} >> => $"${.}.go";

let _ = //log.print((:codegenGroups));

# main

let [_, basepath, json, appname, groups] = //os.args;


let include = //rel.union(//seq.split(",", groups) => codegenGroups(.@item));

let _ = //log.print((:groups, :include));

let module = //encoding.json.decode(cond json {"-": //os.stdin, _: //os.file(json)});
let goModule = go.module(module);
let app = module("apps")(appname);
let endpoints = app("endpoints") orderby .@;
let restEndpoints = endpoints where .@item.@value('restParams')?:();

let config = (
    :app,
    :basepath,
    :endpoints,
    :module,
    :restEndpoints,
    :goModule,
    appname:       sysl.app.name(app),
    clientImports: goModule.clientImports(restEndpoints),
    hasDB:         "DB" <: sysl.patterns(app),
);

//archive.tar.tar({
    "app.go":              //{./svc_app},
    "error_types.go":      //{./svc_error_types},
    # "grpc_handler.go":     //{./grpc_handler},
    # "grpc_interface.go":   //{./grpc_interface},
    "requestrouter.go":    //{./svc_router},
    "service.go":          //{./svc_service},
    "servicehandler.go":   //{./svc_handler},
    "serviceinterface.go": //{./svc_interface},
    "types.go":            //{./svc_types},
} where .@ <: include >> .(config))
