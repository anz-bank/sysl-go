#!/usr/bin/env arrai

let go   = //{./go};
let sysl = //{./sysl};

let [_, basepath, json, appname, exclude] = //os.args;
let exclude = //seq.split(",")(exclude) => $"${.@item}.go";
let module = //encoding.json.decode(cond json {"-": //os.stdin, _: //os.file(json)});
let goModule = go.module(module);
let app = module("apps")(appname);
let appname = sysl.app.name(app);
let endpoints = app("endpoints") orderby .@;
let restEndpoints = endpoints where .@item.@value('restParams')?:();
let clientImports = goModule.clientImports(restEndpoints);
let hasDB = "DB" <: sysl.patterns(app);
let config = (
    :app,
    :appname,
    :basepath,
    :clientImports,
    :endpoints,
    :goModule,
    :hasDB,
    :module,
    :restEndpoints,
);
//archive.tar.tar({
    "app.go":              //{./svc_app},
    "error_types.go":      //{./svc_error_types},
    "servicehandler.go":   //{./svc_handler},
    "serviceinterface.go": //{./svc_interface},
    "requestrouter.go":    //{./svc_router},
    "service.go":          //{./svc_service},
    "types.go":            //{./svc_types},
} where . !<: exclude >> .(config))
