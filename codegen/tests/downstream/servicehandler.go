// Code generated by sysl DO NOT EDIT.
package downstream

import (
	"net/http"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/core"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"
)

// Handler interface for Downstream
type Handler interface {
	GetServiceDocsListHandler(w http.ResponseWriter, r *http.Request)
}

// ServiceHandler for Downstream API
type ServiceHandler struct {
	genCallback      core.RestGenCallback
	serviceInterface *ServiceInterface
}

// NewServiceHandler for Downstream
func NewServiceHandler(genCallback core.RestGenCallback, serviceInterface *ServiceInterface) *ServiceHandler {
	return &ServiceHandler{genCallback, serviceInterface}
}

// GetServiceDocsListHandler ...
func (s *ServiceHandler) GetServiceDocsListHandler(w http.ResponseWriter, r *http.Request) {
	if s.serviceInterface.GetServiceDocsList == nil {
		common.HandleError(r.Context(), w, common.InternalError, "not implemented", nil, s.genCallback.MapError)
		return
	}

	ctx := common.RequestHeaderToContext(r.Context(), r.Header)
	ctx = common.RespHeaderAndStatusToContext(ctx, make(http.Header), http.StatusOK)
	var req GetServiceDocsListRequest

	ctx, cancel := s.genCallback.DownstreamTimeoutContext(ctx)
	defer cancel()
	valErr := validator.Validate(&req)
	if valErr != nil {
		common.HandleError(ctx, w, common.BadRequestError, "Invalid request", valErr, s.genCallback.MapError)
		return
	}

	client := GetServiceDocsListClient{}

	servicedoc, err := s.serviceInterface.GetServiceDocsList(ctx, &req, client)
	if err != nil {
		common.HandleError(ctx, w, common.DownstreamUnexpectedResponseError, "Downstream failure", err, s.genCallback.MapError)
		return
	}

	headermap, httpstatus := common.RespHeaderAndStatusFromContext(ctx)
	restlib.SetHeaders(w, headermap)
	restlib.SendHTTPResponse(w, httpstatus, servicedoc)
}
